#!/bin/bash
function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

function _verlte() {
	[  "$1" = "$(echo -e "$1\n$2" | sort -V | head -n1)" ]
}

function _verlt() {
	if [ "$1" = "$2" ]; then
		return 1
	else
		_verlte "$1" "$2"
	fi
}

function _download_latest_ttyd() {
	ttyd_binary_url=$(curl -s https://api.github.com/repos/tsl0922/ttyd/releases/latest | jq -r ".assets[] | select(.name | contains(\"$(arch)\")) | .browser_download_url") >>"${OUTTO}" 2>&1
	if wget -qO /usr/local/bin/ttyd "${ttyd_binary_url}"; then
		echo "ttyd binary download success" >>"${OUTTO}" 2>&1
		chmod +x /usr/local/bin/ttyd
	else
		echo "ttyd binary download failed" >>"${OUTTO}" 2>&1
	fi
}

function _updateservice() {
	# Update nginx service
	if [[ ! -f /install/.quickbox-ws.lock ]]; then
		# Install nodejs for websocks method
		if [[ ! $(which npm) ]] || [[ $(node --version) =~ "v6" ]]; then
			_info "Installing Node.js..."
			cd /tmp || exit 1
			_execute "curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh"
			bash nodesource_setup.sh >>"${OUTTO}" 2>&1
			exitstatus=$?
			counter=0
			while [[ ${exitstatus} -eq 1 ]]; do
				if [[ ${counter} -gt 2 ]]; then
					_error "Fail to update nodejs source list! exit"
					exit 1
				else
					bash nodesource_setup.sh >>"${OUTTO}" 2>&1
					exitstatus=$?
					((counter++))
					_warning "Fail to update nodejs source list! retry..."
				fi
			done
			_execute "sudo bash nodesource_setup.sh"
			_execute "apt-get install -y nodejs"
			if [[ -f /tmp/nodesource_setup.sh ]]; then
				rm nodesource_setup.sh
			fi
		fi
		# install service
		_info "Installing Dashboard service..."
		cd ${local_setup_dashboard}ws ||exit 1
		_execute "npm ci --production"
		\cp -f ${local_setup_template}systemd/quickbox-ws.service.template /etc/systemd/system/quickbox-ws.service
		_execute "systemctl daemon-reload"
		_execute "systemctl enable quickbox-ws.service"
		touch /install/.quickbox-ws.lock
		_success "QuickBox service updated"
	else
		# upgrade to v14
		if [[ ! $(which npm) ]] || [[ ! $(node --version) =~ "v14" ]]; then
			_info "Upgrading Node.js..."
			cd /tmp || exit 1
			_execute "curl -sL https://deb.nodesource.com/setup_14.x -o nodesource_setup.sh"
			bash nodesource_setup.sh >>"${OUTTO}" 2>&1
			exitstatus=$?
			counter=0
			while [[ ${exitstatus} -eq 1 ]]; do
				if [[ ${counter} -gt 2 ]]; then
					_error "Fail to update nodejs source list! exit"
					exit 1
				else
					bash nodesource_setup.sh >>"${OUTTO}" 2>&1
					exitstatus=$?
					((counter++))
					_warning "Fail to update nodejs source list! retry..."
				fi
			done
			_execute "apt-get install -y nodejs"
			if [[ -f /tmp/nodesource_setup.sh ]]; then
				rm nodesource_setup.sh
			fi
		fi
		_info "Reconfig Dashboard service..."
		cd ${local_setup_dashboard}ws ||exit 1
		_execute "npm ci --production"
		_success "Dashboard service updated"
	fi
	# Update flexget nginx reverse proxy
	username=$(cat /root/.admin.info | cut -d: -f1)
	if [[ -f /etc/nginx/apps/${username}.flexget.conf ]]; then
		if (! grep -c 'location /flexget' < /etc/nginx/apps/${username}.flexget.conf > /dev/null); then
			_info "Reconfig FlexGet reverse proxy..."
			sed -i "s/location \/${username}.flexget\//location \/flexget\//g" /etc/nginx/apps/${username}.flexget.conf
			_success "FlexGet reverse proxy updated..."
		fi
	fi
	if [[ -f /install/.lecert.lock ]]; then
		if [[ ! -f /install/domain.info ]]; then
			cat /etc/nginx/sites-enabled/default | grep server_name | head -n 1 | tr -s ' ' | cut -d ' ' -f 3 | sed -e "s/;//" >> /install/domain.info
			sed -zi "s/echo \" Welcome Back \!\"\necho \"    \* Dashboard:  https:\/\/.*\"\necho \"\"//g" /etc/profile
			PUBLICIP=$(ip addr show | grep 'inet ' | grep -v 127.0.0.1 | awk '{print $2}' | cut -d/ -f1 | head -n 1)
			cat >/etc/profile <<EOF
echo " Welcome Back !"
if [[ -f /install/domain.info ]]; then
	echo "    * Dashboard:  https://\$(cat /install/domain.info)"
else
	echo "    * Dashboard:  https://${PUBLICIP}"
fi
echo ""
EOF
		fi
	fi
	# Install at command
	if [[ $(dpkg -s at 2> /dev/null | grep -cow '^Status: install ok installed$') -eq '0' ]]; then
		DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >>"${OUTTO}" 2>&1
		DEBIAN_FRONTEND=noninteractive apt-get -y install at --allow-unauthenticated >>"${OUTTO}" 2>&1 || { local dependError=1; }
	fi
	# Update php version
	if (grep -c 'php7.2-fpm.sock' < /etc/nginx/sites-enabled/default > /dev/null); then
		_info "Installing php7.4..."
		DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >>"${OUTTO}" 2>&1
		DEPLIST="php7.4-cli php7.4-fpm php7.4 php7.4-dev php7.4-memcached php7.4-curl php7.4-gd php7.4-geoip php7.4-json php7.4-mbstring php7.4-opcache php7.4-xml php7.4-xmlrpc php7.4-zip"
		for depend in $DEPLIST; do
			DEBIAN_FRONTEND=noninteractive apt-get -y install "${depend}" --allow-unauthenticated >>"${OUTTO}" 2>&1 || { local dependError=1; }
		done
		rm -f /usr/bin/php
		ln -nsf /usr/bin/php7.4 /usr/bin/php
		sed -i.bak -e "s/post_max_size.*/post_max_size = 64M/" \
			-e "s/upload_max_filesize.*/upload_max_filesize = 92M/" \
			-e "s/expose_php.*/expose_php = Off/" \
			-e "s/128M/768M/" \
			-e "s/;cgi.fix_pathinfo.*/cgi.fix_pathinfo=1/" \
			-e "s/;opcache.enable.*/opcache.enable=1/" \
			-e "s/;opcache.memory_consumption.*/opcache.memory_consumption=128/" \
			-e "s/;opcache.max_accelerated_files.*/opcache.max_accelerated_files=4000/" \
			-e "s/;opcache.revalidate_freq.*/opcache.revalidate_freq=240/" /etc/php/7.4/fpm/php.ini
		phpenmod -v 7.4 opcache
		phpenmod -v 7.4 xml
		phpenmod -v 7.4 mbstring
		phpenmod -v 7.4 msgpack
		phpenmod -v 7.4 memcached
		sed -i "s/php7.2-fpm.sock/php7.4-fpm.sock/g" /etc/nginx/sites-enabled/default
		_success "php version updated..."
	fi
	if (grep -c 'php7.2-fpm.sock' < /etc/nginx/apps/dashboard.conf > /dev/null); then
		\cp -f ${local_setup_template}nginx/dashboard.conf.template /etc/nginx/apps/dashboard.conf
	fi
	if [[ -f /install/.rutorrent.lock ]]; then
		if (grep -c 'php7.2-fpm.sock' < /etc/nginx/apps/rutorrent.conf > /dev/null); then
			_info "updating rutorrent config..."
			cat >/etc/nginx/apps/rutorrent.conf <<NGX
location /rutorrent {
	alias /srv/rutorrent;
	include /etc/nginx/snippets/proxy.conf;
	auth_basic "Password Required";
	auth_basic_user_file /etc/htpasswd.d/htpasswd.\$remote_user;

    location ~ \.php$
    {
      fastcgi_read_timeout 240;
      fastcgi_pass  unix:/run/php/php7.4-fpm.sock;
      include snippets/fastcgi-php.conf;
      fastcgi_param SCRIPT_FILENAME /srv\$fastcgi_script_name;
    }
}
NGX
			_success "rutorrent config updated..."
		fi
	fi
	# Replace webshell
	if [[ ! -f /etc/systemd/system/ttyd.service ]]; then
		# stop shellinabox
		_execute "systemctl stop shellinabox.service"
		_execute "systemctl disable shellinabox.service"
		rm -f /install/.shellinabox.lock >/dev/null 2>&1
		_execute "apt-get remove -y shellinabox"

		# install ttyd and service config
		if (! which jq > /dev/null); then
			_execute "apt-get install -y jq"
		fi
		_download_latest_ttyd
		service ttyd stop >/dev/null 2>&1
		rm -f /etc/init.d/ttyd >/dev/null 2>&1

		cat > /etc/nginx/apps/"${username}".console.conf <<WEBC
location /${username}.console/ {
    proxy_pass http://127.0.0.1:4200;
	rewrite ^/${username}.console(.*) /\$1 break;
    auth_basic "password Required";
    auth_basic_user_file /etc/htpasswd;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
}
WEBC
		cp ${local_setup_template}systemd/ttyd.service.template /etc/systemd/system/ttyd.service
		sed -i "s/USERNAME/${username}/g" /etc/systemd/system/ttyd.service

		# enable ttyd service
		systemctl daemon-reload >/dev/null 2>&1
		systemctl enable ttyd.service >/dev/null 2>&1
		systemctl start ttyd.service >/dev/null 2>&1
		# create lock
		touch /install/.ttyd.lock
	fi
	# check ttyd update
	if (which ttyd > /dev/null && which jq > /dev/null); then
		local current_version
		local latest_version
		current_version=$(ttyd -v | awk '{print $3}')
		latest_version=$(curl -s https://api.github.com/repos/tsl0922/ttyd/releases/latest | jq -r ".tag_name")
		if (_verlt "$current_version" "$latest_version"); then
			_download_latest_ttyd
		fi
	fi
}

function _startservice() {
	# always reload to ensure service up to date
	at now + 1 minute >>"${OUTTO}" 2>&1 <<EOF
sleep 5;\
systemctl restart quickbox-ws.service
EOF
}
