#!/bin/bash
#
# [QuickBox Lite Let's Encrypt Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   JMSolo, Amefs
# Current version:  v1.5.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="Let's Encrypt"
APP_NAME="lecert"
APP_BASEDEPS="socat"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
domain=""

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-d domain] [-l logfile]"
	echo -e "\nOptions:\n"
	echo "-d, --domain <FQDN>       your domain"
	echo "-l, --log <logfile>       specific log file"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installAddSources() {
	_info "Adding additional keys and sources ${APP_TITLE}..."

	_success "Keys and sources added."
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installApp() {
	_info "Building ${APP_TITLE}..."
	mkdir -p /srv/.well-known/acme-challenge
	chown -R root:www-data /srv/.well-known
	if [[ -d /root/.acme.sh ]]; then
		rm -rf /root/.acme.sh
	fi
	cd /tmp
	_execute "git clone https://github.com/Neilpang/acme.sh.git /root/.acme.sh"
	cd /root/.acme.sh || { _error "Can not download acme.sh ..." && exit 1; }
	./acme.sh --install >/dev/null 2>&1
	./acme.sh --register-account -m domain@example.com >>"${OUTTO}" 2>&1
	mkdir -p /etc/nginx/ssl/${domain}/
	_success "${APP_TITLE} Built."
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."
	# reset ssl setting
	sock='php7.4-fpm'
	cat >/etc/nginx/sites-enabled/default <<NGC
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name ${domain};

    location /.well-known {
      alias /srv/.well-known;
      allow all;
      default_type "text/plain";
      autoindex    on;
    }

    #location / {
    #  return 301 https://\$host\$request_uri;
    #}
}

# SSL configuration
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name ${domain};
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    include snippets/ssl-params.conf;
    client_max_body_size 40M;
    server_tokens off;
    root /srv/;

    index index.html index.php index.htm;

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/$sock.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }

    include /etc/nginx/apps/*;

    location ~ /\.ht {
        deny all;
    }

    location /fancyindex {

    }
}
NGC
	_execute "nginx -s reload"
	mkdir -p /root/.quickbox/logs/
	cd /root/.acme.sh || exit 1
	./acme.sh --issue --nginx --domain ${domain} --force \
--keylength ec-384 \
--key-file /etc/nginx/ssl/${domain}/${domain}-key.pem \
--cert-file /etc/nginx/ssl/${domain}/${domain}-cert.pem \
--fullchain-file /etc/nginx/ssl/${domain}/${domain}-ssl.pem \
--reloadcmd "systemctl reload nginx.service; systemctl restart vsftpd.service" \
--log /root/.quickbox/logs/${domain}.log >>"${OUTTO}" 2>&1

	cat >/etc/nginx/sites-enabled/default <<EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name ${domain};

    location /.well-known {
      alias /srv/.well-known;
      allow all;
      default_type "text/plain";
      autoindex    on;
    }

    location / {
      return 301 https://\$host\$request_uri;
    }
}

# SSL configuration
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name ${domain};
    ssl_certificate /etc/nginx/ssl/${domain}/${domain}-ssl.pem;
    ssl_certificate_key /etc/nginx/ssl/${domain}/${domain}-key.pem;
    include snippets/ssl-params.conf;
    client_max_body_size 40M;
    server_tokens off;
    root /srv/;

    index index.html index.php index.htm;

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/$sock.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }

    include /etc/nginx/apps/*;

    location ~ /\.ht {
        deny all;
    }

    location /fancyindex {

    }
}
EOF

	hostnamectl set-hostname ${domain}

	# cronjob
	_execute "./acme.sh --install-cronjob"

	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/${APP_LOCK}
	echo ${domain} >> /install/domain.info
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	# vsftpd tls
	ftp_ip=$(cat /etc/vsftpd.conf | grep pasv_address | grep -Eo "[0-9.]+")
	mv /etc/vsftpd.conf /root/.vsftpd.conf.bak
	\cp -rf /etc/QuickBox/setup/templates/vsftpd/vsftpd.conf.tls.template /etc/vsftpd.conf
	sed -i 's/^\(pasv_min_port=\).*/\110090/' /etc/vsftpd.conf
	sed -i 's/^\(pasv_max_port=\).*/\110100/' /etc/vsftpd.conf
	sed -i "s/^\(rsa_cert_file=\).*/rsa_cert_file=\/etc\/nginx\/ssl\/$domain\/$domain-ssl.pem/" /etc/vsftpd.conf
	sed -i "s/^\(rsa_private_key_file=\).*/rsa_private_key_file=\/etc\/nginx\/ssl\/$domain\/$domain-key.pem/" /etc/vsftpd.conf
	echo "pasv_address=$ftp_ip" >>/etc/vsftpd.conf
	_execute "systemctl restart vsftpd.service"
	_execute "systemctl restart nginx.service"
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl:d: -l help,log:,domain: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	-d | --domain)
		domain="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done
if [[ -z $domain ]]; then
	_error "Domain not exist, exiting..."
	_usage
	exit 1
fi

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
_installSystemUpdates
_installDepends
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup
