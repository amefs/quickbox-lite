#!/bin/bash
#
# [QuickBox Lite noVNC Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Maintainer:   Amefs
# Current version:  v1.5.0
# Author:           Mischief
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
DISTRO=$(lsb_release -is)
CODENAME=$(lsb_release -cs)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="noVNC"
APP_NAME="novnc"
APP_BASEDEPS="expect xfce4 xfce4-goodies xfonts-base dbus-x11 xinit xserver-xorg xserver-xorg-legacy x11-xserver-utils tightvncserver fonts-noto iptables-persistent firefox-esr"
APP_WEB_PORT="6080"
APP_DAEMON_PORT="5901"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} already installed !"
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installAddSources() {
	_info "Adding additional keys and sources ${APP_TITLE}..."
	if [[ $DISTRO == "Ubuntu" ]]; then
		apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0x0AB215679C571D1C8325275B9BDB3D89CE49EC21 >/dev/null 2>&1
		add-apt-repository ppa:mozillateam/ppa -y >/dev/null 2>&1
	fi
	_success "Keys and sources added."
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		export DEBIAN_FRONTEND=noninteractive
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installApp() {
	_info "Building ${APP_TITLE}..."
	if [[ $CODENAME == bionic ]]; then
		_execute "apt-get -y install libappindicator-dev"
	fi
	cd /tmp
	wget -q -O master.zip 'https://github.com/novnc/noVNC/archive/master.zip'
	_execute "unzip master.zip"
	rm -rf master.zip
	_execute "mv noVNC-master /srv/novnc/"
	_info "Generating self-signed certificate for noVNC security..."
	_execute "openssl req -config /root/.openssl.cnf -newkey rsa:1024 -x509 -days 1095 -nodes -out /srv/novnc/utils/self.pem -keyout /srv/novnc/utils/self.pem"
	chown www-data:www-data -R /srv/novnc/
	chmod +rx /srv/novnc/utils/novnc_proxy
	_success "${APP_TITLE} Built."
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."
	username=$(cat /root/.admin.info | cut -d: -f1)
	passphrase=$(cat /root/.ssh/local_user)
	passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
	password=$(echo "${passtext}" | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:"${passphrase}" -nosalt)

	_success "${APP_TITLE} configured."
	cat >/etc/systemd/system/tightvnc.service <<EOF
[Unit]
Description=Remote desktop service (TightVNC)
After=syslog.target network.target

[Service]
User=${username}
Group=${username}
Type=forking
PIDFile=/home/${username}/.vnc/%H:1.pid
ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill :1 > /dev/null 2>&1 || :'
ExecStart=/usr/bin/vncserver -depth 24 -geometry 1440x900 :1
ExecStop=/usr/bin/vncserver -kill :1
KillMode=mixed
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

	cat >/etc/systemd/system/novnc.service <<EOF
[Unit]
Description=novnc websockify
After=network.target

[Service]
Type=simple
User=root
PIDFile=/srv/novnc/utils/%H:%i.pid
ExecStart=/srv/novnc/utils/novnc_proxy --vnc 127.0.0.1:${APP_DAEMON_PORT} &
KillMode=process
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

	cat >/etc/nginx/conf.d/novnc.conf <<EOF
upstream novnc {
    server 127.0.0.1:${APP_WEB_PORT};
}
EOF

	cat >/etc/nginx/apps/vnc.conf <<EOF
location /websockify {
  proxy_http_version 1.1;
  proxy_pass http://novnc;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "upgrade";
  proxy_read_timeout 61s;
  proxy_buffering off;
}

location /vnc {
  index vnc.html;
  alias /srv/novnc/;
  try_files \$uri \$uri/ /index.php?q=\$uri&\$args;
  auth_basic "Password Required";
  auth_basic_user_file /etc/htpasswd.d/htpasswd.${username};
}
EOF

	# create log password with expect
	prog=/usr/bin/vncpasswd
	_execute "runuser -l $username -c /usr/bin/expect" <<EOF
spawn "$prog"
expect "Password:"
send "$password\r"
expect "Verify:"
send "$password\r"
expect "(y/n)?\r"
send "n\r"
expect dof
exit
EOF
	mkdir -p /home/${username}/.vnc >/dev/null 2>&1
	cat >/home/${username}/.vnc/xstartup <<EOF
#!/bin/bash
xrdb $HOME/.Xresources
startxfce4 &
EOF
	chmod +x /home/${username}/.vnc/xstartup
	chown ${username}:${username} -R /home/${username}/.vnc

	_execute "nginx -s reload"
	_execute "systemctl daemon-reload"
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/${APP_LOCK}
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	_execute "systemctl start tightvnc.service"
	_execute "systemctl enable tightvnc.service"
	_execute "systemctl start novnc.service"
	_execute "systemctl enable novnc.service"
	_execute "iptables -A INPUT -p tcp -s localhost --dport $APP_DAEMON_PORT -j ACCEPT"
	_execute "iptables -A INPUT -p tcp --dport $APP_DAEMON_PORT -j DROP"
	_execute "iptables-save > /etc/iptables/rules.v4"
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl: -l help,log: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
_installAddSources
_installSystemUpdates
_installDepends
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup
