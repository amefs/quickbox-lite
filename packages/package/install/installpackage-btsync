#!/bin/bash
#
# [QuickBox Lite Resilio Sync Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.5.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="Resilio Sync"
APP_NAME="btsync"
APP_SERVICE="resilio-sync"
APP_BASEDEPS="resilio-sync"
APP_HOST="127.0.0.1"

# RANDOM PORT
APP_WEB_PORT_LOW="15301"
APP_WEB_PORT_HIGH="15350"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} already installed !"
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installAddSources() {
	_info "Adding additional keys and sources ${APP_TITLE}..."
	sudo sh -c 'echo "deb http://linux-packages.resilio.com/resilio-sync/deb resilio-sync non-free" > /etc/apt/sources.list.d/btsync.list'
	wget -qO - https://linux-packages.resilio.com/resilio-sync/key.asc | sudo apt-key add - >/dev/null 2>&1
	_success "Keys and sources added."
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installApp() {
	_info "Building ${APP_TITLE}..."

	_success "${APP_TITLE} Built."
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."
	_execute "systemctl disable resilio-sync"
	_execute "systemctl stop resilio-sync"
	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		# get used port
		local usedport=""
		if [[ ! -z $(find /install/ -type f | grep .$APP_NAME.port) ]]; then
			usedport=$(cat $(find /install/ -type f | grep .$APP_NAME.port))
		fi
		# generate available port
		PORT=$(shuf -i ${APP_WEB_PORT_LOW}-${APP_WEB_PORT_HIGH} -n 1)
		while [[ "$(netstat -ln | grep ':'"$PORT"'' | grep -c 'LISTEN')" -eq "1" || $usedport =~ $PORT ]]; do
			PORT=$(shuf -i ${APP_WEB_PORT_LOW}-${APP_WEB_PORT_HIGH} -n 1)
		done
		echo $PORT >/install/$username.$APP_NAME.port

		mkdir -p /home/${username}/sync_folder
		sudo chown -R ${username}:${username} /home/${username}/sync_folder
		sudo chmod 775 /home/${username}/sync_folder

		mkdir -p /home/${username}/.config/resilio-sync/
		mkdir -p /home/${username}/.config/resilio-sync/run
		mkdir -p /home/${username}/.config/resilio-sync/lib
		cp -r /var/lib/resilio-sync/* /home/${username}/.config/resilio-sync/lib >>"${OUTTO}" 2>&1

		cat >/home/${username}/.config/resilio-sync/config.json <<EOF
{
    "listening_port" : 0,
    "storage_path" : "/home/${username}/.config/resilio-sync/lib",
    "pid_file" : "/home/${username}/.config/resilio-sync/run/sync.pid",
    "agree_to_EULA": "yes",

    "webui" :
    {
        "listen" : "${APP_HOST}:${PORT}"
    }
}
EOF
		sudo chown -R ${username}:${username} /home/${username}/.config

		# Generate reverse proxy upstream
		cat >/etc/nginx/apps/${username}.resilio-sync.conf <<EOF
location /${username}.btsync/ {
    auth_basic "Password Required";
    auth_basic_user_file /etc/htpasswd.d/htpasswd.\$remote_user;
    rewrite ^/${username}/btsync/gui(.*) /${username}.btsync\$1 last;
    proxy_pass http://${APP_HOST}:${PORT}/gui/;
    proxy_redirect /gui/ /${username}.btsync/;
    proxy_buffering off;
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
}
location /gui/ {
    proxy_pass http://${APP_HOST}:${PORT}/gui/;
    proxy_buffering off;
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
}
EOF
	done

	cat >/etc/systemd/system/resilio-sync@.service <<'EOF'
[Unit]
Description=Resilio Sync service
Documentation=https://help.resilio.com
After=network.target network-online.target

[Service]
Type=forking
UMask=0002
Restart=on-failure
PermissionsStartOnly=true

User=%I
Group=%I
Environment="SYNC_USER=%I"
Environment="SYNC_GROUP=%I"

Environment="SYNC_RUN_DIR=/home/%I/.config/resilio-sync/run"
Environment="SYNC_LIB_DIR=/home/%I/.config/resilio-sync/lib"
Environment="SYNC_CONF_DIR=/home/%I/.config/resilio-sync"

ExecStartPre=/bin/mkdir -p ${SYNC_RUN_DIR} ${SYNC_LIB_DIR}
ExecStartPre=/bin/chown -R ${SYNC_USER}:${SYNC_GROUP} ${SYNC_RUN_DIR} ${SYNC_LIB_DIR}
PIDFile=${SYNC_RUN_DIR}/sync.pid
ExecStart=/usr/bin/rslsync --config /home/%I/.config/resilio-sync/config.json

[Install]
WantedBy=multi-user.target
EOF
	_execute "systemctl daemon-reload"
	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/${APP_LOCK}
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		_execute "systemctl enable ${APP_SERVICE}@${username}"
		_execute "systemctl start ${APP_SERVICE}@${username}"
	done
	_execute "nginx -s reload"
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl: -l help,log: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
_installAddSources
_installSystemUpdates
_installDepends
_configureApp
_installAppLock
_installAppStart
_lockCleanup
