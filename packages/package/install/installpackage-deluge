#!/bin/bash
#
# [QuickBox Lite Deluge Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.5.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
CODENAME=$(lsb_release -cs)
# Server IP Address
SERVERIP=$(ip addr show | grep 'inet ' | grep -v 127.0.0.1 | awk '{print $2}' | cut -d/ -f1 | head -n 1)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

function _version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }
#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="Deluge"
APP_NAME="deluge"
APP_HOST="127.0.0.1"

# RANDOM PORT
APP_WEB_PORT_LOW="15201"
APP_WEB_PORT_HIGH="15250"
APP_DAEMON_PORT_LOW="10001"
APP_DAEMON_PORT_HIGH="10050"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
libtversion=1.1.14
libt_major_version=1.1
if [[ ${CODENAME} == "focal" ]]; then
	deversion=2.0.3
	de_major_version=2.0
else
	deversion=1.3.15
	de_major_version=1.3
fi
cdn=$(cat /install/.cdn.lock)

BRANCH_LT="https://github.com/arvidn/libtorrent.git"
################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile] [--lt] [--de]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo "--lt <version>            the libtorrent version you want to install"
	echo "--de <version>            the deluge version you want to install"
	echo "--with-cf                 use cloudflare instead of github"
	echo "--with-sf                 use sourceforge instead of github"
	echo "--with-osdn               use osdn(jp)  instead of github"
	echo "--with-github             use github"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} already installed !"
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installFpm() {
	fpm -h >/dev/null 2>&1
	exit=$?
	if [[ ! $exit == '0' ]]; then
		_info "Installing fpm package management..."
		_execute "apt-get install -yqq ruby ruby-dev rubygems build-essential"
		_execute "gem install -N fpm"
		_success "fpm installed."
	fi
}

function _cf() {
	DOMAIN="deb.ezapi.net"
	SUBFOLDER=""
	ARCH="amd64"
	SUFFIX=""
}

function _sf() {
	DOMAIN="sourceforge.net"
	SUBFOLDER="projects/seedbox-software-for-linux/files/"
	ARCH="amd64"
	SUFFIX="/download"
}

function _osdn() {
	DOMAIN="osdn.dl.osdn.net"
	SUBFOLDER="storage/g/s/se/seedbox-software-for-linux/"
	ARCH="amd64"
	SUFFIX=""
}

function _github() {
	DOMAIN="raw.githubusercontent.com"
	SUBFOLDER="amefs/quickbox-files/master/"
	ARCH="amd64"
	SUFFIX=""
}

function _download() {
	# init download url
	PACKAGE=$1
	DEB=$2
	case "$cdn" in
	"cf")
		_cf
		wget -t3 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"sf")
		_sf
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"osdn")
		_osdn
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"github")
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	*)
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	esac
}

function _installLibt() {
		# Libtorrent
	APP_TITLE="Libtorrent"
	if [ ${libt_deb_req} == 1 ] || [ ${libt_deb_python_req} == 1 ] || [ ${libt_deb_python3_req} == 1 ]; then
		_info "Installing Libtorrent..."
		PACKAGE="libtorrent-rasterbar"
		cd /tmp || exit 1
		if [ ${libt_deb_req} == 1 ]; then
			if [[ ${libt_major_version} == "1.1" ]]; then
				LIBTBIN=libtorrent-rasterbar9_${libtversion}-1build1_amd64.deb
			elif [[ ${libt_major_version} == "1.2" ]]; then
				LIBTBIN=libtorrent-rasterbar10_${libtversion}-1build1_amd64.deb
			fi
			DEB=${LIBTBIN}
			_download ${PACKAGE} ${DEB}
			_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install  /tmp/${LIBTBIN}"
			LIBTDEVBIN=libtorrent-rasterbar-dev_${libtversion}-1build1_amd64.deb
			DEB=${LIBTDEVBIN}
			_download ${PACKAGE} ${DEB}
			_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install  /tmp/${LIBTDEVBIN}"
			rm -rf {${LIBTBIN},${LIBTDEVBIN}}
			if [[ ${libt_major_version} == "1.1" ]]; then
				touch /install/.libtorrent-rasterbar9.lock
			elif [[ ${libt_major_version} == "1.2" ]]; then
				touch /install/.libtorrent-rasterbar10.lock
			fi
		else
			[[ "$(dpkg -s libtorrent-rasterbar9 2> /dev/null | grep -cow '^Status: install ok installed$')" -eq '1' ]] && libtversion=$(dpkg -s libtorrent-rasterbar9 2>/dev/null | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1)
			[[ "$(dpkg -s libtorrent-rasterbar10 2> /dev/null | grep -cow '^Status: install ok installed$')" -eq '1' ]] && libtversion=$(dpkg -s libtorrent-rasterbar10 2>/dev/null | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1)
		fi
		cd /tmp || exit 1
		if [ ${libt_deb_python3_req} == 1 ]; then
			PYLIBTBIN=python3-libtorrent_${libtversion}-1build1_amd64.deb
			DEB=${PYLIBTBIN}
			_download ${PACKAGE} ${DEB}
			_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install /tmp/${PYLIBTBIN}"
			rm -rf ${PYLIBTBIN}
			touch /install/.libtorrent-rasterbar-python3.lock
		elif [ ${libt_deb_python_req} == 1 ]; then
			PYLIBTBIN=python-libtorrent_${libtversion}-1build1_amd64.deb
			DEB=${PYLIBTBIN}
			_download ${PACKAGE} ${DEB}
			_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install /tmp/${PYLIBTBIN}"
			rm -rf ${PYLIBTBIN}
			touch /install/.libtorrent-rasterbar-python.lock
		fi
	elif [ ${libt_compile_req} == 1 ] || [ ${libt_compile_python_req} == 1 ] || [ ${libt_compile_python3_req} == 1 ]; then
		if [ ${libt_compile_req} == 1 ]; then
			cd /tmp || exit 1
			APP_TITLE="Libtorrent"
			# prepare package toolchain
			APP_BASEDEPS="build-essential libgl1-mesa-dev libssl-dev libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev libboost-python-dev python python-dev python3 python3-dev pkg-config automake libtool git libgeoip-dev zlib1g-dev"
			_installDepends
			_installFpm
			_execute "wget -q -O get-pip.py https://bootstrap.pypa.io/get-pip.py"
			_execute "python2 get-pip.py --force-reinstall"
			_execute "python3 get-pip.py --force-reinstall"
			_execute "python2 -m pip install --upgrade pip"
			_execute "python3 -m pip install --upgrade pip"
			if [ ${CODENAME} == 'xenial' ]; then
				_execute "apt purge -y libssl-dev"
				_execute "apt install -y libssl-dev=1.0.*"
			fi
			_info "Build libtorrent for Deluge ... "
			if [[ ${libt_major_version} == "1.2" ]]; then
				LTRC=RC_1_2
				case ${libtversion} in
				1.2.0) LTCIMMIT="3a1e546" ;;
				1.2.1) LTCIMMIT="4b26829" ;;
				1.2.2) LTCIMMIT="9c97055" ;;
				1.2.3) LTCIMMIT="078f7b9" ;;
				1.2.4) LTCIMMIT="ad83b1c" ;;
				1.2.5) LTCIMMIT="bc66605" ;;
				1.2.6) LTCIMMIT="b9b5443" ;;
				1.2.7) LTCIMMIT="8e71015" ;;
				1.2.8) LTCIMMIT="7dcd091" ;;
				1.2.9) LTCIMMIT="a80f458" ;;
				1.2.10) LTCIMMIT="70f1de3" ;;
				1.2.11) LTCIMMIT="471e772" ;;
				1.2.12) LTCIMMIT="e3f2b01" ;;
				1.2.13) LTCIMMIT="e00a152" ;;
				1.2.14) LTCIMMIT="33a10d5" ;;
				*) LTCIMMIT="." ;;
				esac
			elif [[ ${libt_major_version} == "1.1" ]]; then
				LTRC=RC_1_1
				case ${libtversion} in
				1.1.0) LTCIMMIT="2921caf" ;;
				1.1.1) LTCIMMIT="599967c" ;;
				1.1.2) LTCIMMIT="a42d439" ;;
				1.1.3) LTCIMMIT="b065536" ;;
				1.1.4) LTCIMMIT="5188c19" ;;
				1.1.5) LTCIMMIT="6214103" ;;
				1.1.6) LTCIMMIT="b45acf2" ;;
				1.1.7) LTCIMMIT="aaf9304" ;;
				1.1.8) LTCIMMIT="4576723" ;;
				1.1.9) LTCIMMIT="19df645" ;;
				1.1.10) LTCIMMIT="200bb49" ;;
				1.1.11) LTCIMMIT="25a1f12" ;;
				1.1.12) LTCIMMIT="4342725" ;;
				1.1.13) LTCIMMIT="6f1250c" ;;
				1.1.14) LTCIMMIT="244f0f1" ;;
				*) LTCIMMIT="." ;;
				esac
			elif [[ ${libt_major_version} == "1.0" ]]; then
				LTRC=RC_1_0
				case ${libtversion} in
				1.0.0) LTCIMMIT="1633ee2" ;;
				1.0.1) LTCIMMIT="49c2ec9" ;;
				1.0.2) LTCIMMIT="8f2c17c" ;;
				1.0.3) LTCIMMIT="edfe81b" ;;
				1.0.4) LTCIMMIT="a586deb" ;;
				1.0.5) LTCIMMIT="45521a3" ;;
				1.0.6) LTCIMMIT="b709199" ;;
				1.0.7) LTCIMMIT="15b1cd9" ;;
				1.0.8) LTCIMMIT="e44e8da" ;;
				1.0.9) LTCIMMIT="b342192" ;;
				1.0.10) LTCIMMIT="e650ecc" ;;
				1.0.11) LTCIMMIT="4e90eb1" ;;
				*) LTCIMMIT="." ;;
				esac
			fi
			mkdir -p /root/pool
			mkdir -p /tmp/dist

			cd /tmp || exit 1
			_execute "git clone -b ${LTRC} ${BRANCH_LT} libtorrent"
			cd libtorrent || { _error "Can not download libtorrent-rasterbar" && exit 1; }
			_execute "git checkout ${LTCIMMIT}"
			# compile base package
			if [[ ${libt_major_version} == "1.0" ]] || [[ ${libt_major_version} == "1.1" ]]; then
				wget --no-check-certificate -q -O libtorrent-rasterbar-${LTRC}.patch https://raw.githubusercontent.com/amefs/QB/master/setup/sources/libtorrent-rasterbar-${LTRC}.patch
				patch -p1 <libtorrent-rasterbar-${LTRC}.patch >/dev/null
				_execute "./autotool.sh"
				_execute "./configure --with-lib-geoip --with-libiconv CXXFLAGS=-std=c++11 CPPFLAGS=-std=c++11 --prefix=/tmp/dist/libtorrent-rasterbar/usr/local"
			elif [[ ${libt_major_version} == "1.2" ]]; then
				_execute "./autotool.sh"
				_execute "./configure --with-lib-geoip --with-libiconv CXXFLAGS=-std=c++14 CPPFLAGS=-std=c++14 --prefix=/tmp/dist/libtorrent-rasterbar/usr/local"
			fi
			_execute "make -j$(nproc)"
			mkdir -p /tmp/dist/libtorrent-rasterbar/usr/local
			_execute "make install"
			fpm -f -C /tmp/dist/libtorrent-rasterbar -p /root/pool/libtorrent-rasterbar_${libtversion}.deb -s dir -t deb -n libtorrent-rasterbar --version ${libtversion} --description "libtorrent-rasterbar compiled by QuickBox Lite" >>${OUTTO} 2>&1
			_execute "dpkg -i /root/pool/libtorrent-rasterbar_${libtversion}.deb"
			echo ${libtversion} >/install/.libtorrent-rasterbar.lock
			_success "Libtorrent built ..."
		else
			# ensure python binding has the same version
			libtversion=$(cat /install/.libtorrent-rasterbar.lock)
			libt_major_version=$(echo ${libtversion}| cut -d. -f1,2)
			if [[ ${libt_major_version} == "1.2" ]]; then
				LTRC=RC_1_2
				case ${libtversion} in
				1.2.0) LTCIMMIT="3a1e546" ;;
				1.2.1) LTCIMMIT="4b26829" ;;
				1.2.2) LTCIMMIT="9c97055" ;;
				1.2.3) LTCIMMIT="078f7b9" ;;
				1.2.4) LTCIMMIT="ad83b1c" ;;
				1.2.5) LTCIMMIT="bc66605" ;;
				1.2.6) LTCIMMIT="b9b5443" ;;
				1.2.7) LTCIMMIT="8e71015" ;;
				1.2.8) LTCIMMIT="7dcd091" ;;
				1.2.9) LTCIMMIT="a80f458" ;;
				1.2.10) LTCIMMIT="70f1de3" ;;
				1.2.11) LTCIMMIT="471e772" ;;
				1.2.12) LTCIMMIT="e3f2b01" ;;
				*) LTCIMMIT="." ;;
				esac
			elif [[ ${libt_major_version} == "1.1" ]]; then
				LTRC=RC_1_1
				case ${libtversion} in
				1.1.0) LTCIMMIT="2921caf" ;;
				1.1.1) LTCIMMIT="599967c" ;;
				1.1.2) LTCIMMIT="a42d439" ;;
				1.1.3) LTCIMMIT="b065536" ;;
				1.1.4) LTCIMMIT="5188c19" ;;
				1.1.5) LTCIMMIT="6214103" ;;
				1.1.6) LTCIMMIT="b45acf2" ;;
				1.1.7) LTCIMMIT="aaf9304" ;;
				1.1.8) LTCIMMIT="4576723" ;;
				1.1.9) LTCIMMIT="19df645" ;;
				1.1.10) LTCIMMIT="200bb49" ;;
				1.1.11) LTCIMMIT="25a1f12" ;;
				1.1.12) LTCIMMIT="4342725" ;;
				1.1.13) LTCIMMIT="6f1250c" ;;
				1.1.14) LTCIMMIT="244f0f1" ;;
				*) LTCIMMIT="." ;;
				esac
			elif [[ ${libt_major_version} == "1.0" ]]; then
				LTRC=RC_1_0
				case ${libtversion} in
				1.0.0) LTCIMMIT="1633ee2" ;;
				1.0.1) LTCIMMIT="49c2ec9" ;;
				1.0.2) LTCIMMIT="8f2c17c" ;;
				1.0.3) LTCIMMIT="edfe81b" ;;
				1.0.4) LTCIMMIT="a586deb" ;;
				1.0.5) LTCIMMIT="45521a3" ;;
				1.0.6) LTCIMMIT="b709199" ;;
				1.0.7) LTCIMMIT="15b1cd9" ;;
				1.0.8) LTCIMMIT="e44e8da" ;;
				1.0.9) LTCIMMIT="b342192" ;;
				1.0.10) LTCIMMIT="e650ecc" ;;
				1.0.11) LTCIMMIT="4e90eb1" ;;
				*) LTCIMMIT="." ;;
				esac
			fi
			cd /tmp || exit 1
			_execute "git clone -b ${LTRC} ${BRANCH_LT} libtorrent"
			cd libtorrent || { _error "Can not download libtorrent-rasterbar" && exit 1; }
			_execute "git checkout ${LTCIMMIT}"
		fi

		if [ ${libt_compile_python3_req} == 1 ]; then
			_info "Build libtorrent python binding for Deluge ... "
			cd /tmp/libtorrent || exit 1
			_execute "./autotool.sh"
			if [[ "$CODENAME" =~ ("xenial"|"stretch") ]]; then
				boost_args="--with-boost-python=boost_python-py35"
			else
				boost_args="--with-boost-python=boost_python3"
			fi
			if [[ ${libt_major_version} == "1.0" ]] || [[ ${libt_major_version} == "1.1" ]]; then
				PYTHON=python3 ./configure --enable-python-binding --with-lib-geoip --with-libiconv CXXFLAGS=-std=c++11 CPPFLAGS=-std=c++11 ${boost_args} --prefix=/tmp/dist/libtorrent-rasterbar/usr/local >>${OUTTO} 2>&1
			elif [[ ${libt_major_version} == "1.2" ]]; then
				PYTHON=python3 ./configure --enable-python-binding --with-lib-geoip --with-libiconv CXXFLAGS=-std=c++14 CPPFLAGS=-std=c++14 ${boost_args} --prefix=/tmp/dist/libtorrent-rasterbar/usr/local >>${OUTTO} 2>&1
			fi
			_execute "make -j$(nproc)"
			mkdir -p /tmp/dist/libtorrent-rasterbar/usr/local
			_execute "make install"
			fpm --verbose --python-bin=python3 --python-package-name-prefix=python3 -n python3-libtorrent -f -p /root/pool/python3-libtorrent_${libtversion}.deb --version ${libtversion} --description "Libtorrent rasterbar python bindings compiled by QuickBox Lite" -s python -t deb /tmp/libtorrent/bindings/python/setup.py >>${OUTTO} 2>&1
			_execute "dpkg -i /root/pool/python3-libtorrent_${libtversion}.deb"
			echo ${libtversion} >/install/.libtorrent-rasterbar-python3.lock
			_success "Libtorrent python binding built ..."
		elif [ ${libt_compile_python_req} == 1 ]; then
			_info "Build libtorrent python binding for Deluge ... "
			cd /tmp/libtorrent || exit 1
			_execute "./autotool.sh"
			PYTHON=python2 ./configure --enable-python-binding --with-lib-geoip --with-libiconv CXXFLAGS=-std=c++11 CPPFLAGS=-std=c++11 --prefix=/tmp/dist/libtorrent-rasterbar/usr/local >>${OUTTO} 2>&1
			_execute "make -j$(nproc)"
			mkdir -p /tmp/dist/libtorrent-rasterbar/usr/local
			_execute "make install"
			fpm --verbose --python-bin=python2 --python-package-name-prefix=python -n python-libtorrent -f -p /root/pool/python-libtorrent_${libtversion}.deb --version ${libtversion} --description "Libtorrent rasterbar python bindings compiled by QuickBox Lite" -s python -t deb /tmp/libtorrent/bindings/python/setup.py >>${OUTTO} 2>&1
			_execute "dpkg -i /root/pool/python-libtorrent_${libtversion}.deb"
			echo ${libtversion} >/install/.libtorrent-rasterbar-python.lock
			_success "Libtorrent python binding built ..."
		fi
		ldconfig
	fi
}

function _installDeluge() {
	APP_TITLE="Deluge"
	if $(echo "${de_version_list[@]}" | grep -wq "${deversion}") && [ ! -f /install/.libtorrent-rasterbar.lock ]; then
		_info "Installing Deluge ${deversion}..."
		PACKAGE="deluge"
		cd /tmp || exit 1
		if [[ ${de_major_version} == "2.0" ]]; then
			APP_BASEDEPS="python3 python3-dev python3-pip"
			_installDepends
			_execute "pip3 install --upgrade wheel"
			_execute "pip3 install --upgrade cryptography"
			_execute "pip3 install --upgrade twisted[tls]"
			_execute "pip3 install --upgrade --force-reinstall pyOpenSSL"
			DEBASE="deluge-common_${deversion}-1build1_all.deb deluge-console_${deversion}-1build1_all.deb deluge-gtk_${deversion}-1build1_all.deb deluge-web_${deversion}-1build1_all.deb deluged_${deversion}-1build1_all.deb"
			for DEB in $DEBASE; do
				_download ${PACKAGE} ${DEB}
				_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install /tmp/${DEB}"
				rm -rf /tmp/${DEB}
			done
		else
			APP_BASEDEPS="python python-dev python-pip"
			_installDepends
			_execute "pip2 install --upgrade wheel"
			_execute "pip2 install --upgrade twisted[tls]"
			_execute "pip2 install --upgrade future"
			DEBASE="deluge-common_1.3.15-1build1_all.deb deluge-console_1.3.15-1build1_all.deb deluge-gtk_1.3.15-1build1_all.deb deluge-web_1.3.15-1build1_all.deb deluged_1.3.15-1build1_all.deb"
			for DEB in $DEBASE; do
				_download ${PACKAGE} ${DEB}
				_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install /tmp/${DEB}"
				rm -rf /tmp/${DEB}
			done
		fi
		_success "${APP_TITLE} installed."
	else
		cd /tmp || exit 1
		if [[ ${de_major_version} == "2.0" ]]; then
			_info "Building Deluge ${deversion}..."
			_info "Downloading deluge-${deversion}.tar.xz ..."
			while true; do
				wget -q -O deluge-${deversion}.tar.xz http://download.deluge-torrent.org/source/2.0/deluge-${deversion}.tar.xz && break
			done
			APP_BASEDEPS="build-essential intltool libtool libssl-dev libgeoip-dev librsvg2-common geoip-database python3 python3-setuptools intltool python3-zope.interface python3-twisted python3-openssl python3-xdg python3-chardet python3-mako python3-setproctitle python3-rencode python3-pil librsvg2-common xdg-utils"
			_installDepends
			_execute "pip3 install --upgrade wheel"
			_execute "pip3 install --upgrade cryptography"
			_execute "pip3 install --upgrade twisted[tls]"
			_execute "pip3 install --upgrade --force-reinstall pyOpenSSL"
			tar -xf deluge-${deversion}.tar.xz
			cd deluge-${deversion} || exit 1
			_execute "python3 setup.py build"
			_execute "python3 setup.py install --record /install/.deluge.install.record --install-layout=deb"
			_execute "python3 setup.py install_data"
			cd /tmp || exit 1
			rm -rf {deluge-${deversion},libtorrent}
			rm -f deluge-${deversion}.tar.xz
		else
			_info "Downloading deluge-${deversion}.tar.xz ..."
			while true; do
				wget -q -O deluge-${deversion}.tar.xz http://download.deluge-torrent.org/source/deluge-${deversion}.tar.gz && break
			done
			APP_BASEDEPS="build-essential intltool libtool libssl-dev libgeoip-dev librsvg2-common geoip-database python-dev python-twisted python-openssl python-setuptools python-xdg python-chardet python-notify python-pip python-pygame python-glade2 xdg-utils python-mako"
			_installDepends
			_execute "pip2 install --upgrade twisted[tls]"
			tar -xf deluge-${deversion}.tar.xz
			cd deluge-${deversion} || exit 1
			_execute "python2 setup.py build"
			_execute "python2 setup.py install --record /install/.deluge.install.record --install-layout=deb"
			_execute "python2 setup.py install_data"
			cd /tmp || exit 1
			rm -rf {deluge-${deversion},libtorrent}
			rm -f deluge-${deversion}.tar.xz
		fi
		_success "${APP_TITLE} Built."
	fi
}

function _installApp() {
	_info "Building ${APP_TITLE}..."
	_info "Fetching package list..."
	cd /tmp || exit 1
	wget -t3 -T20 -q -O packages.lst https://deb.ezapi.net/packages.lst
	if [ $? -ne 0 ]; then
		_github
		wget -t5 -T10 -q -O packages.lst https://raw.githubusercontent.com/amefs/quickbox-files/master/packages.lst
		if [ $? -ne 0 ]; then
			_sf
			wget -t5 -T10 -q -O packages.lst https://sourceforge.net/projects/seedbox-software-for-linux/files/packages.lst/download
		fi
	fi
	libt_version_list=$(cat packages.lst | grep -wE 'libtorrent-rasterbar[0-9]{1,2}' | grep ${CODENAME} | grep amd64 | awk '{ print $5}')
	de_version_list=$(cat packages.lst | grep -w deluged | grep ${CODENAME} | grep amd64 | awk '{ print $5}')
	rm -f packages.lst
	# version check
	if ([ $CODENAME == "focal" ] && _version_gt 2.0 $deversion); then
		_warning "Deluge 1.3.x currently not available in focal, fallback to v2.0.3"
		deversion=2.0.3
	fi
	libt_major_version=$(echo ${libtversion}| cut -d. -f1,2)
	if [[ ${libt_major_version} == "1.2" ]]; then
		if [[ ${de_major_version} == "1.3" ]]; then
			_warning "Deluge 1.3.x do not support libtorrent 1.2.x, fallback to v2.0.3"
			deversion=2.0.3
			de_major_version="2.0"
		fi
	fi
	if [[ "$CODENAME" =~ ("xenial"|"stretch") ]]; then
		if (_version_gt ${libtversion} "1.2.11"); then
			libtversion="1.2.11"
			libt_major_version="1.2"
			_warning "Use Libtorrent ${libtversion} for Deluge";
		fi
	fi
	# lock check
	libt_compile_req=0
	libt_compile_python_req=0
	libt_compile_python3_req=0
	libt_deb_req=0
	libt_deb_python_req=0
	libt_deb_python3_req=0
	# .libtorrent-rasterbar.lock libtorrent-rasterbar by compiled
	# .libtorrent-rasterbar9.lock libtorrent-rasterbar 1.1.x
	# .libtorrent-rasterbar10.lock libtorrent-rasterbar 1.2.x
	# .libtorrent-rasterbar-python.lock libtorrent-rasterbar python binding
	# .libtorrent-rasterbar-python3.lock libtorrent-rasterbar python3 binding
	if [[ -f /install/.libtorrent-rasterbar.lock ]]; then
		if [[ ${de_major_version} == "2.0" ]]; then
			if [[ ! -f /install/.libtorrent-rasterbar-python3.lock ]]; then
				libt_compile_python3_req=1
			fi
		else
			if [[ ! -f /install/.libtorrent-rasterbar-python.lock ]]; then
				libt_compile_python_req=1
			fi
		fi
		if ! (${libt_compile_python_req} || ${libt_compile_python3_req}); then 
			_success "Libtorrent already installed, Skip..." 
		fi
	else
		APP_TITLE="Libtorrent"
		if $(echo "${libt_version_list[@]}" | grep -wq "${libtversion}"); then
			if ([[ ${libt_major_version} == "1.1" ]] && [[ ! -f /install/.libtorrent-rasterbar9.lock ]]) || ([[ ${libt_major_version} == "1.2" ]] && [[ ! -f /install/.libtorrent-rasterbar10.lock ]]); then
				libt_deb_req=1
			fi
			if [[ ${de_major_version} == "2.0" ]]; then
				if [[ ! -f /install/.libtorrent-rasterbar-python3.lock ]]; then
					libt_deb_python3_req=1
				fi
			else
				if [[ ! -f /install/.libtorrent-rasterbar-python.lock ]]; then
					libt_deb_python_req=1
				fi
			fi
		else
			libt_compile_req=1
			if [[ ${de_major_version} == "2.0" ]]; then
				libt_compile_python3_req=1
			else
				libt_compile_python_req=1
			fi
		fi
	fi
	_installLibt
	_installDeluge
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."

	killall deluged >/dev/null 2>&1
	killall deluge-web >/dev/null 2>&1
	# download plugin
	if [[ ! -d /usr/local/bin/quickbox/deluge/plugins ]]; then
		mkdir -p /usr/local/bin/quickbox/deluge/plugins
	fi
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/ltConfig-0.3.1-py2.7.egg https://github.com/ratanakvlun/deluge-ltconfig/releases/download/v0.3.1/ltConfig-0.3.1-py2.7.egg
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/ltConfig-2.0.0.egg https://github.com/ratanakvlun/deluge-ltconfig/releases/download/v2.0.0/ltConfig-2.0.0.egg
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/YaRSS2-1.4.3-py2.7.egg https://bitbucket.org/bendikro/deluge-yarss-plugin/downloads/YaRSS2-1.4.3-py2.7.egg
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/YaRSS2-2.1.4-py3.6.egg https://bitbucket.org/bendikro/deluge-yarss-plugin/downloads/YaRSS2-2.1.4-py3.6.egg
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/YaRSS2-2.1.4-py3.7.egg https://bitbucket.org/bendikro/deluge-yarss-plugin/downloads/YaRSS2-2.1.4-py3.7.egg
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/AutoRemovePlus-0.6.1-py2.7.egg https://github.com/omaralvarez/deluge-autoremoveplus/releases/download/0.6.1/AutoRemovePlus-0.6.1-py2.7.egg
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/LabelPlus-0.3.2.2-py2.7.egg https://github.com/ratanakvlun/deluge-labelplus/releases/download/v0.3.2.2/LabelPlus-0.3.2.2-py2.7.egg
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/TotalTraffic-0.5-py2.7.egg https://forum.deluge-torrent.org/download/file.php?id=4247
	wget --no-check-certificate -q -O /usr/local/bin/quickbox/deluge/plugins/Stats-0.3.2-py2.7.egg https://github.com/downloads/ianmartin/Deluge-stats-plugin/Stats-0.3.2-py2.7.egg

	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		# get used port
		local usedport=""
		if (find /install/ -type f | grep -q .deluged.port); then
			usedport=$(cat $(find /install/ -type f | grep .deluged.port))
		fi
		# generate daemon port
		DPORT=$(shuf -i ${APP_DAEMON_PORT_LOW}-${APP_DAEMON_PORT_HIGH} -n 1)
		while [[ "$(netstat -ln | grep ':'"$DPORT"'' | grep -c 'LISTEN')" -eq "1" || $usedport =~ $DPORT ]]; do
			DPORT=$(shuf -i ${APP_DAEMON_PORT_LOW}-${APP_DAEMON_PORT_HIGH} -n 1)
		done
		echo "$DPORT" >/install/$username.deluged.port
		# get used port
		local usedport=""
		if (find /install/ -type f | grep -q .deluge-web.port); then
			usedport=$(cat $(find /install/ -type f | grep .deluge-web.port))
		fi
		# generate web port
		DWPORT=$(shuf -i ${APP_WEB_PORT_LOW}-${APP_WEB_PORT_HIGH} -n 1)
		while [[ "$(netstat -ln | grep ':'"$DWPORT"'' | grep -c 'LISTEN')" -eq "1" || $usedport =~ $DWPORT ]]; do
			DWPORT=$(shuf -i ${APP_WEB_PORT_LOW}-${APP_WEB_PORT_HIGH} -n 1)
		done
		echo "$DWPORT" >/install/$username.deluge-web.port
		passphrase=$(cat /root/.ssh/local_user)
		passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
		password=$(echo ${passtext} | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:${passphrase} -nosalt)

		DWSALT=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)
		DWP=$(python2 /usr/local/bin/quickbox/system/auxiliary/deluge.Userpass.py ${password} ${DWSALT})
		DUDID=$(python2 /usr/local/bin/quickbox/system/auxiliary/deluge.addHost.py)

		if [[ ! -d /home/${username}/.config/deluge/plugins ]]; then
			mkdir -p /home/${username}/.config/deluge/plugins
		fi
		if _version_gt ${deversion} 2.0; then
			cp -f /usr/local/bin/quickbox/deluge/plugins/ltConfig-2.0.0.egg /home/${username}/.config/deluge/plugins/
			if [[ "$CODENAME" =~ ("xenial"|"bionic"|"stretch") ]]; then
				cp -f /usr/local/bin/quickbox/deluge/plugins/YaRSS2-2.1.4-py3.6.egg /home/${username}/.config/deluge/plugins/
			else
				cp -f /usr/local/bin/quickbox/deluge/plugins/YaRSS2-2.1.4-py3.7.egg /home/${username}/.config/deluge/plugins/
			fi
		else
			cp -f /usr/local/bin/quickbox/deluge/plugins/ltConfig-0.3.1-py2.7.egg /home/${username}/.config/deluge/plugins/
			cp -f /usr/local/bin/quickbox/deluge/plugins/YaRSS2-1.4.3-py2.7.egg /home/${username}/.config/deluge/plugins/
			cp -f /usr/local/bin/quickbox/deluge/plugins/AutoRemovePlus-0.6.1-py2.7.egg /home/${username}/.config/deluge/plugins/
			cp -f /usr/local/bin/quickbox/deluge/plugins/LabelPlus-0.3.2.2-py2.7.egg /home/${username}/.config/deluge/plugins/
			cp -f /usr/local/bin/quickbox/deluge/plugins/TotalTraffic-0.5-py2.7.egg /home/${username}/.config/deluge/plugins/
			cp -f /usr/local/bin/quickbox/deluge/plugins/Stats-0.3.2-py2.7.egg /home/${username}/.config/deluge/plugins/
		fi


		if [[ -f /install/.libtorrent-rasterbar.lock ]]; then
			libtversion=$(cat /install/.libtorrent-rasterbar.lock)
			libt_major_version=$(echo ${libtversion}| cut -d. -f1,2)
		elif [[ -f /install/.libtorrent-rasterbar10.lock ]]; then
			libt_major_version=1.2
		else
			libt_major_version=1.1
		fi
		if [[ ${libt_major_version} == "1.2" ]]; then
			IFACE=$(ip link show | grep -i broadcast | grep -m1 UP | cut -d: -f 2 | cut -d@ -f 1 | sed -e 's/ //g')
		else
			IFACE=""
		fi
		cat >/home/${username}/.config/deluge/core.conf <<DC
  {
    "file": 1,
    "format": 1
  }{
    "info_sent": 0.0,
    "lsd": false,
    "max_download_speed": -1.0,
    "send_info": false,
    "natpmp": true,
    "move_completed_path": "/home/${username}/Downloads",
    "peer_tos": "0x00",
    "enc_in_policy": 1,
    "queue_new_to_top": false,
    "ignore_limits_on_local_network": true,
    "rate_limit_ip_overhead": true,
    "daemon_port": ${DPORT},
    "torrentfiles_location": "/home/${username}/dwatch",
    "max_active_limit": -1,
    "geoip_db_location": "/usr/share/GeoIP/GeoIP.dat",
    "upnp": false,
    "utpex": true,
    "max_active_downloading": -1,
    "max_active_seeding": -1,
    "allow_remote": true,
    "outgoing_ports": [
      0,
      0
    ],
    "enabled_plugins": [
      "Stats", 	
      "ltConfig",
      "TotalTraffic"
    ],
    "max_half_open_connections": -1,
    "download_location": "/home/${username}/torrents/deluge",
    "compact_allocation": true,
    "max_upload_speed": -1.0,
    "plugins_location": "/home/${username}/.config/deluge/plugins",
    "max_connections_global": -1,
    "enc_prefer_rc4": true,
    "cache_expiry": 60,
    "dht": true,
    "stop_seed_at_ratio": false,
    "stop_seed_ratio": 2.0,
    "max_download_speed_per_torrent": -1,
    "prioritize_first_last_pieces": false,
    "max_upload_speed_per_torrent": -1,
    "auto_managed": true,
    "enc_level": 2,
    "copy_torrent_file": false,
    "max_connections_per_second": -1,
    "listen_ports": [
      6881,
      6891
    ],
    "max_connections_per_torrent": -1,
    "del_copy_torrent_file": false,
    "move_completed": false,
    "autoadd_enable": true,
    "proxies": {
      "peer": {
        "username": "",
        "password": "",
        "hostname": "",
        "type": 0,
        "port": 8080
      },
      "web_seed": {
        "username": "",
        "password": "",
        "hostname": "",
        "type": 0,
        "port": 8080
      },
      "tracker": {
        "username": "",
        "password": "",
        "hostname": "",
        "type": 0,
        "port": 8080
      },
      "dht": {
        "username": "",
        "password": "",
        "hostname": "",
        "type": 0,
        "port": 8080
      }
    },
    "dont_count_slow_torrents": true,
    "add_paused": false,
    "random_outgoing_ports": true,
    "max_upload_slots_per_torrent": -1,
    "new_release_check": false,
    "enc_out_policy": 1,
    "seed_time_ratio_limit": -1,
    "remove_seed_at_ratio": false,
    "autoadd_location": "/home/${username}/dwatch/",
    "max_upload_slots_global": -1,
    "seed_time_limit": -1,
    "cache_size": 512,
    "share_ratio_limit": -1.0,
    "random_port": true,
    "listen_interface": "${IFACE}"
  }
DC

		cat >/home/${username}/.config/deluge/web.conf <<DWC
{
  "file": 1,
  "format": 1
}{
  "port": ${DWPORT},
  "enabled_plugins": [
    "Stats", 
    "ltConfig", 
    "TotalTraffic"
  ],
  "pwd_sha1": "${DWP}",
  "theme": "gray",
  "show_sidebar": true,
  "sidebar_show_zero": false,
  "pkey": "ssl/daemon.pkey",
  "https": false,
  "sessions": {},
  "base": "/",
  "interface": "${APP_HOST}",
  "pwd_salt": "${DWSALT}",
  "show_session_speed": true,
  "first_login": false,
  "cert": "ssl/daemon.cert",
  "session_timeout": 3600,
  "default_daemon": "${DUDID}",
  "sidebar_multiple_filters": true
}
DWC

		cat >/home/${username}/.config/deluge/hostlist.conf.1.2 <<DHL
{
  "file": 1,
  "format": 1
}{
  "hosts": [
    [
      "${DUDID}",
      "127.0.0.1",
      ${DPORT},
      "${username}",
      "${password}"
    ]
  ]
}
DHL
		chmod 755 -R /home/${username}/.config/deluge
		echo "${username}:${password}:10" >/home/${username}/.config/deluge/auth
		chmod 600 /home/${username}/.config/deluge/auth
		chown -R ${username}.${username} /home/${username}/.config/

		if [[ ! -d /home/${username}/dwatch ]]; then
			mkdir -p /home/${username}/dwatch
		fi
		chown ${username}: /home/${username}/dwatch
		if [[ ! -d /home/${username}/torrents/deluge ]]; then
			mkdir -p /home/${username}/torrents/deluge
		fi
		chown -R ${username}: /home/${username}/torrents

		cat >/etc/nginx/conf.d/${username}.deluge.conf <<EOF
upstream ${username}.deluge {
  server 127.0.0.1:${DWPORT};
}
EOF
		cat >/etc/nginx/apps/${username}.ddlindex.conf <<EOF
location /${username}.deluge.downloads {
  alias /home/${username}/torrents/deluge;
  include /etc/nginx/snippets/fancyindex.conf;
  auth_basic "Password Required";
  auth_basic_user_file /etc/htpasswd.d/htpasswd.${username};

  location ~* \.php$ {

  }
}
EOF
		if [[ -f /install/.${username}.flexget.lock ]]; then
			if [[ ! -f /install/.pyenv.lock ]]; then
				if [[ ${de_major_version} == "2.0" ]]; then
					if [[ "$CODENAME" == "stretch" ]]; then
						_execute '/usr/local/bin/python3.7 -m pip install deluge-client'
					else
						_execute 'python3 -m pip install deluge-client'
					fi
				else
					_execute 'pip2 install deluge-client'
				fi
			else
				sudo -u ${username} -H bash -c "/home/${username}/.local/flexget3/bin/pip install deluge-client" >>"${OUTTO}" 2>&1
			fi
			sed -i "s/DEPORT/${DPORT}/g" /home/${username}/.config/flexget/config.yml
			_execute "systemctl restart flexget@${username}"
		fi
		if [[ -f /install/.${username}.autoremovetorrents.lock ]]; then
			sudo -u ${username} -H bash -c "/home/${username}/.local/autoremovetorrents/bin/pip install deluge-client" >>"${OUTTO}" 2>&1
			sed -i "s/DEPORT/${DPORT}/g" /home/${username}/.config/autoremovetorrents/config.yml
		fi
	done
	cat >/etc/nginx/apps/deluge.conf <<'DRP'
location /deluge {
  return 301 /deluge/;
}

location /deluge/ {
  include /etc/nginx/snippets/proxy.conf;
  auth_basic "Password Required";
  auth_basic_user_file /etc/htpasswd.d/htpasswd.$remote_user;
  proxy_set_header X-Deluge-Base "/deluge/";
  rewrite ^/deluge/(.*) /$1 break;
  proxy_pass http://$remote_user.deluge;
}
DRP
	cat >/etc/systemd/system/deluged@.service <<DDS
[Unit]
Description=Deluge Bittorrent Client Daemon
After=network.target

[Service]
Type=simple
User=%I
LimitNOFILE=infinity
ExecStart=/usr/bin/deluged -d
ExecStop=/usr/bin/killall -w -s 9 /usr/bin/deluged
Restart=on-failure
TimeoutStopSec=300

[Install]
WantedBy=multi-user.target
DDS
	if [[ ${de_major_version} == "2.0" ]]; then
		cat >/etc/systemd/system/deluge-web@.service <<DWS
[Unit]
Description=Deluge Bittorrent Client Web Interface
After=network.target

[Service]
Type=simple
User=%I

ExecStart=/usr/bin/deluge-web -d
ExecStop=/usr/bin/killall -w -s 9 /usr/bin/deluge-web
TimeoutStopSec=300
Restart=on-failure

[Install]
WantedBy=multi-user.target
DWS
	else
		cat >/etc/systemd/system/deluge-web@.service <<DWS
[Unit]
Description=Deluge Bittorrent Client Web Interface
After=network.target

[Service]
Type=simple
User=%I

ExecStart=/usr/bin/deluge-web
ExecStop=/usr/bin/killall -w -s 9 /usr/bin/deluge-web
TimeoutStopSec=300
Restart=on-failure

[Install]
WantedBy=multi-user.target
DWS
	fi
	_execute "systemctl daemon-reload"
	_execute "nginx -s reload"
	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/${APP_LOCK}
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		_execute "systemctl enable deluged@${username}"
		_execute "systemctl start deluged@${username}"
		_execute "systemctl enable deluge-web@${username}"
		_execute "systemctl start deluge-web@${username}"
	done
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl: -l help,with-cf,with-sf,with-osdn,with-github,log:,de:,lt: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--de)
		deversion="$2"
		de_major_version=$(echo ${deversion}| cut -d. -f1,2)
		shift
		;;
	--lt)
		libtversion="$2"
		shift
		;;
	--with-cf)
		cdn="cf"
		;;
	--with-sf)
		cdn="sf"
		;;
	--with-osdn)
		cdn="osdn"
		;;
	--with-github)
		cdn="github"
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
if [[ ! -f /install/.system.lock ]]; then
	_installSystemUpdates
fi
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup