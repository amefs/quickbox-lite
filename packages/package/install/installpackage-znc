#!/bin/bash
#
# [QuickBox Lite ZNC Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Maintainer:   Amefs
# Current version:  v1.5.0
# Author:           Mischief, JMSolo
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="ZNC"
APP_NAME="znc"
APP_SERVICE="znc"
APP_BASEDEPS="software-properties-common"
APP_HOST="127.0.0.1"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} already installed !"
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installAddSources() {
	_info "Adding additional keys and sources ${APP_TITLE}..."
	#curl -sL https://example.ppa/something.key | sudo apt-key add - >/dev/null 2>&1
	#echo "deb https://example.ppa/ubuntu CODENAME stable" | sudo tee /etc/apt/sources.list.d/app.list >/dev/null 2>&1
	_success "Keys and sources added."
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installFpm() {
	fpm -h >/dev/null 2>&1
	exit=$?
	if [[ ! $exit == '0' ]]; then
		_info "Installing fpm package management..."
		_execute "apt-get install -yqq ruby ruby-dev rubygems build-essential"
		_execute "gem install --no-ri --no-rdoc fpm"
		_success "fpm installed."
	fi
}

function _installApp() {
	_installFpm
	_info "Building ${APP_TITLE}..."

	_execute "useradd znc -m -s /bin/bash"
	_execute "passwd znc -l"
	mkdir -p /tmp/znc-latest
	cd /tmp
	_execute "wget -q http://znc.in/releases/znc-latest.tar.gz"
	_execute "tar -zxvf znc-latest.tar.gz -C /tmp/znc-latest --strip-components=1"
	cd /tmp/znc-latest || { _error "Can not download ZNC" && exit 1; }
	_execute "./configure --prefix=/tmp/dist/znc/usr/local"
	ZNCVERSION=$(grep -Eo "AC_INIT\(\[znc\],.*" configure.ac | grep -Eo "[0-9.]+" | head -n1)
	_execute "make -j$(nproc)"
	mkdir -p /tmp/dist/znc/usr/local
	mkdir -p /root/pool
	_execute "make install"
	fpm -f -C /tmp/dist/znc -p /root/pool/znc_${ZNCVERSION}.deb -s dir -t deb -n znc --version ${ZNCVERSION} --description "znc compiled by QuickBox Lite" >/dev/null 2>&1
	_execute "dpkg -i /root/pool/znc_${ZNCVERSION}.deb"
	cd /tmp
	rm -rf /tmp/{znc-latest,znc-latest.tar.gz} >/dev/null 2>&1

	_success "${APP_TITLE} Built."
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."
	cat >/etc/systemd/system/$APP_SERVICE.service <<'EOF'
[Unit]
Description=ZNC IRC Bouncer
After=syslog.target
After=network.target

[Service]
Type=simple
User=znc
Group=znc

ExecStart=/usr/local/bin/znc --foreground

TimeoutSec=300
Restart=on-failure
RestartSec=150

[Install]
WantedBy=multi-user.target
EOF
	_execute "systemctl daemon-reload"

	_print "Please answer the following questions to finish znc Configuration:"
	sleep 2
	sudo -H -u $APP_NAME $APP_NAME --makeconf
	_execute "killall -u $APP_NAME $APP_NAME"
	_execute "service $APP_NAME stop"

	sed -i '/Version = .*/a TrustedProxy = 127.0.0.1' /home/znc/.znc/configs/znc.conf
	sed -i '/<Listener l>/a 	URIPrefix = /znc/' /home/znc/.znc/configs/znc.conf
	chmod -R 0775 /home/znc/.znc/

	PORT="$(cat /home/znc/.znc/configs/znc.conf | grep Port | sed -e 's/^[ \t]Port = //' | sort -nrt v -k2,2 | head -n 1)"
	cat >/etc/nginx/apps/$APP_NAME.conf <<EOF
location /znc/ {
    include /etc/nginx/snippets/proxy.conf;
    proxy_pass http://$APP_HOST:${PORT}/$APP_NAME/;
    proxy_set_header    Host              \$host;
    proxy_set_header    X-Real-IP         \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
}
EOF
	sudo chown www-data: /etc/nginx/apps/$APP_NAME.conf
	_execute "nginx -s reload"

	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/${APP_LOCK}
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	_execute "systemctl enable $APP_NAME"
	_execute "service $APP_NAME start"
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl: -l help,log: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
_installSystemUpdates
_installDepends
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup
