#!/bin/bash
#
# [QuickBox Lite ruTorrent Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.4.6
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="ruTorrent"
APP_NAME="rutorrent"
APP_BASEDEPS="sox libsox-fmt-mp3 geoip-database python-dev python-cryptography python-openssl python-setuptools mediainfo zip unzip"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log

BRANCH="https://github.com/Novik/ruTorrent.git"

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ ! -f /install/.rtorrent.lock ]]; then
		_warning "Automatically install rTorrent... "
		bash /usr/local/bin/quickbox/package/install/installpackage-rtorrent
	fi
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} already installed !"
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installApp() {
	_info "Building ${APP_TITLE}..."
	cd /srv || exit 1
	if [[ ! -d /srv/$APP_NAME/ ]]; then
		_execute "git clone --recurse-submodules $BRANCH $APP_NAME"
		chown -R www-data:www-data $APP_NAME
		rm -rf /srv/$APP_NAME/conf/config.php
	fi
	_success "${APP_TITLE} Built."
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."
	_info "Setting up plugins... "
	plugin_lib="/usr/local/bin/quickbox/rutorrent/plugins/"
	if [[ ! -d ${plugin_lib} ]]; then
		_execute "sudo svn co https://github.com/Novik/ruTorrent/trunk/plugins ${plugin_lib}"
		if [[ ! -d ${plugin_lib}fileupload ]]; then
			_execute "sudo svn co https://github.com/nelu/rutorrent-thirdparty-plugins/trunk/fileupload ${plugin_lib}fileupload"
		fi
		if [[ ! -d ${plugin_lib}fileshare ]]; then
			_execute "sudo svn co https://github.com/nelu/rutorrent-thirdparty-plugins/trunk/fileshare ${plugin_lib}fileshare"
		fi
		if [[ ! -d ${plugin_lib}pausewebui ]]; then
			_execute "sudo svn co https://github.com/Gyran/rutorrent-pausewebui/trunk/ ${plugin_lib}pausewebui"
		fi
		if [[ ! -d ${plugin_lib}filemanager ]]; then
			_execute "sudo svn co https://github.com/nelu/rutorrent-thirdparty-plugins/trunk/filemanager ${plugin_lib}filemanager"
			cat >${plugin_lib}filemanager/conf.php <<EOF
<?php

  \$fm['tempdir'] = '/tmp';
  \$fm['mkdperm'] = 755;

  // set with fullpath to binary or leave empty
  \$pathToExternals['rar'] = '/usr/local/bin/rar';
  \$pathToExternals['unrar'] = '/usr/local/bin/unrar';
  \$pathToExternals['zip'] = '/usr/bin/zip';
  \$pathToExternals['unzip'] = '/usr/bin/unzip';
  \$pathToExternals['tar'] = '/bin/tar';

  // archive mangling, see archiver man page before editing

  \$fm['archive']['types'] = array('rar', 'unrar', 'zip', 'tar', 'gzip', 'bzip2');

  \$fm['archive']['compress'][0] = range(0, 5);
  \$fm['archive']['compress'][1] = array('-0', '-1', '-9');
  \$fm['archive']['compress'][2] = \$fm['archive']['compress'][3] = \$fm['archive']['compress'][4] = array(0);

?>
EOF
		fi

		if [[ ! -d ${plugin_lib}ratiocolor ]]; then
			_execute "sudo svn co https://github.com/Gyran/rutorrent-ratiocolor.git/trunk ${plugin_lib}ratiocolor"
			sed -i "s/changeWhat = \"cell-background\";/changeWhat = \"font\";/g" ${plugin_lib}ratiocolor/init.js
		fi
		if [[ ! -d ${plugin_lib}logoff ]]; then
			cd ${plugin_lib} || { _error "Can not install ruTorrent logoff" && exit 1; }
			_execute "wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/rutorrent-logoff/logoff-1.3.tar.gz"
			_execute "tar xf logoff-1.3.tar.gz"
			rm -rf logoff-1.3.tar.gz
		fi
		if [[ ! -d ${plugin_lib}mobile ]]; then
			_execute "sudo git clone https://github.com/xombiemp/rutorrentMobile.git ${plugin_lib}mobile"
		fi
		if [[ ! -d ${plugin_lib}stream ]]; then
			_execute "sudo svn co https://github.com/hashknot/rutorrent-stream/trunk/stream ${plugin_lib}stream"
		fi
	fi
	rm -rf /srv/rutorrent/plugins/_cloudflare

	_info "Initializing ruTorrent plugins... "
	cd /srv/rutorrent/ || { _error "Can not install ruTorrent" && exit 1; }
	sed -i 's/useExternal = false;/useExternal = "mktorrent";/' /srv/rutorrent/plugins/create/conf.php
	sed -i 's/pathToCreatetorrent = '\'\''/pathToCreatetorrent = '\''\/usr\/bin\/mktorrent'\''/' /srv/rutorrent/plugins/create/conf.php
	sed -i "s/\$pathToExternals\['sox'\] = ''/\$pathToExternals\['sox'\] = '\/usr\/bin\/sox'/g" /srv/rutorrent/plugins/spectrogram/conf.php

	if [[ ! -d /srv/rutorrent/home/db/ ]]; then
		mkdir -p /srv/rutorrent/home/db/
	fi

	if [[ ! -d /srv/rutorrent/plugins/theme/themes/club-QuickBox ]]; then
		cd /srv/rutorrent/plugins/theme/themes || { _error "Can not install ruTorrent theme " && exit 1; }
		_execute "sudo git clone https://lab.quickbox.io/QuickBox/club-QuickBox.git club-QuickBox"
		sudo perl -pi -e "s/\$defaultTheme \= \"\"\;/\$defaultTheme \= \"club-QuickBox\"\;/g" /srv/rutorrent/plugins/theme/conf.php
	fi

	if [[ ! -d /srv/rutorrent/plugins/filemanager ]]; then
		cd /srv/rutorrent/plugins/ || { _error "Can not install ruTorrent filemanager" && exit 1; }
		cp -R ${plugin_lib}filemanager .
		chown -R www-data: /srv/rutorrent/plugins/filemanager
		chmod -R +x filemanager/scripts
	fi

	if [[ ! -d /srv/rutorrent/plugins/ratiocolor ]]; then
		cd /srv/rutorrent/plugins || { _error "Can not install ruTorrent ratiocolor" && exit 1; }
		cp -R ${plugin_lib}ratiocolor .
		sed -i "s/changeWhat = \"cell-background\";/changeWhat = \"font\";/g" /srv/rutorrent/plugins/ratiocolor/init.js
	fi

	if [[ ! -d /srv/rutorrent/plugins/mobile ]]; then
		cd /srv/rutorrent/plugins || { _error "Can not install ruTorrent mobile" && exit 1; }
		cp -R ${plugin_lib}mobile .
		chown -R www-data: mobile
	fi

	if [[ ! -d /srv/rutorrent/plugins/logoff ]]; then
		cd /srv/rutorrent/plugins || { _error "Can not install ruTorrent logoff" && exit 1; }
		cp -R ${plugin_lib}logoff .
		chown -R www-data: logoff
	fi

	if [[ ! -d /srv/rutorrent/plugins/stream ]]; then
		cd /srv/rutorrent/plugins || { _error "Can not install ruTorrent stream" && exit 1; }
		cp -R ${plugin_lib}stream .
		chown -R www-data: stream
	fi

	_info "Setting up configs for ruTorrent... "

	cat >/srv/rutorrent/conf/config.php <<EOF
<?php
// configuration parameters

// for snoopy client
@define('HTTP_USER_AGENT', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; pl; rv:1.9) Gecko/2008052906 Firefox/3.0', true);
@define('HTTP_TIME_OUT', 30, true); // in seconds
@define('HTTP_USE_GZIP', true, true);
\$httpIP = null; // IP string. Or null for any.

@define('RPC_TIME_OUT', 5, true); // in seconds

@define('LOG_RPC_CALLS', false, true);
@define('LOG_RPC_FAULTS', true, true);

// for php
@define('PHP_USE_GZIP', false, true);
@define('PHP_GZIP_LEVEL', 2, true);

\$do_diagnostic = true;
\$log_file = '/tmp/rutorrent_errors.log'; // path to log file (comment or leave blank to disable logging)

\$saveUploadedTorrents = true; // Save uploaded torrents to profile/torrents directory or not
\$overwriteUploadedTorrents = false; // Overwrite existing uploaded torrents in profile/torrents directory or make unique name

// \$topDirectory = '/home'; // Upper available directory. Absolute path with trail slash.
\$forbidUserSettings = false;

//\$scgi_port = 5000;
//\$scgi_host = "127.0.0.1";

// For web->rtorrent link through unix domain socket
// (scgi_local in rtorrent conf file), change variables
// above to something like this:
//
//\$scgi_port = 0;
//\$scgi_host = "unix:///tmp/rtorrent.sock";

//\$XMLRPCMountPoint = "/RPC2"; // DO NOT DELETE THIS LINE!!! DO NOT COMMENT THIS LINE!!!

\$pathToExternals = array(
"php" => '/usr/bin/php', // Something like /usr/bin/php. If empty, will be found in PATH.
"curl" => '/usr/bin/curl', // Something like /usr/bin/curl. If empty, will be found in PATH.
"gzip" => '/bin/gzip', // Something like /usr/bin/gzip. If empty, will be found in PATH.
"id" => '/usr/bin/id', // Something like /usr/bin/id. If empty, will be found in PATH.
"stat" => '/usr/bin/stat', // Something like /usr/bin/stat. If empty, will be found in PATH.
"bzip2" => '/bin/bzip2',
);

\$localhosts = array( // list of local interfaces
"127.0.0.1",
"localhost",
);

\$profilePath = '../share'; // Path to user profiles
\$profileMask = 0777; // Mask for files and directory creation in user profiles.
// Both Webserver and rtorrent users must have read-write access to it.
// For example, if Webserver and rtorrent users are in the same group then the value may be 0770.

?>
EOF
	cat >/srv/rutorrent/plugins/_task/conf.php <<TAS
<?php
// configuration parameters
\$pathToExternals['pgrep'] = '/usr/bin/pgrep';
\$maxConcurentTasks      = 3;
\$showTabAlways          = 1;
TAS

	_info "Setting up nginx for ruTorrent... "
	if [[ ! -f /etc/nginx/apps/rutorrent.conf ]]; then
		cat >/etc/nginx/apps/rutorrent.conf <<NGX
location /rutorrent {
  alias /srv/rutorrent;
  include /etc/nginx/snippets/proxy.conf;
  auth_basic "Password Required";
  auth_basic_user_file /etc/htpasswd.d/htpasswd.\$remote_user;

  location ~ \.php$
  {
    fastcgi_read_timeout 240;
    fastcgi_pass  unix:/run/php/php7.4-fpm.sock;
    include snippets/fastcgi-php.conf;
    fastcgi_param SCRIPT_FILENAME /srv\$fastcgi_script_name;
  }
}
NGX
	fi
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		if [[ ! -f /srv/rutorrent/conf/users/${username}/config.php ]]; then
			mkdir -p /srv/rutorrent/conf/users/${username}/
		fi
		cat >/srv/rutorrent/conf/users/${username}/config.php <<RUCONF
<?php
\$topDirectory = '/home/${username}';
\$scgi_port = 0;
\$scgi_host = "unix:///var/run/${username}/.rtorrent.sock";
\$XMLRPCMountPoint = "/${username}";
\$quotaUser = "${username}";
?>
RUCONF
	done
	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/${APP_LOCK}
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	# schedule restart service
	at now + 1 minute >>"${OUTTO}" 2>&1 <<EOF
sleep 5;\
/usr/local/bin/quickbox/system/auxiliary/php-fpm-cli -r 'opcache_reset();';\
systemctl restart php7.4-fpm;\
nginx -s reload
EOF
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl: -l help,log: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
if [[ ! -f /install/.system.lock ]]; then
	_installSystemUpdates
fi
_installDepends
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup
