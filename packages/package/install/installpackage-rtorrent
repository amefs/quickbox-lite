#!/bin/bash
#
# [QuickBox Lite rTorrent Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.5.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
CODENAME=$(lsb_release -cs)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="rTorrent"
APP_NAME="rtorrent"
APP_SERVICE="rtorrent"
APP_BASEDEPS="git build-essential automake libcppunit-dev libtool zlib1g-dev gawk libsigc++-2.0-dev libssl-dev libncurses5-dev libncursesw5-dev libcurl4-openssl-dev libxmlrpc-c++8-dev nano screen unzip"

# RANDOM PORT
APP_DAEMON_PORT_LOW="55001"
APP_DAEMON_PORT_HIGH="55050"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
version=0.9.8
cdn=$(cat /install/.cdn.lock)

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _menuinstall() {
	OUTTO=$(whiptail --title "Log" --inputbox "Specify a log path?\nENTER to make no changes" 10 72 3>&1 1>&2 2>&3)
	if [[ $OUTTO == "" ]]; then
		OUTTO=/srv/dashboard/db/output.log
	fi
	version=$(
		whiptail --title "App Version" --radiolist \
		"Choose an available version" 14 56 6 \
		"0.9.4" "oldstable" off \
		"0.9.6" "stable" on \
		"0.9.7" "feature" off \
		"0.9.8" "feature" off \
		"feature-bind" "latest experiment code" off 3>&1 1>&2 2>&3
	)
}

function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-gh] [-l logfile] [-u username] [-v version]"
	echo -e "\nOptions:\n"
	echo "-g, --gui                 use a menu configuration to install"
	echo "-l, --log <logfile>       specific log file"
	echo "-v, --version <version>   the application version you want to install"
	echo "--with-cf                 use cloudflare instead of github"
	echo "--with-sf                 use sourceforge instead of github"
	echo "--with-osdn               use osdn(jp)  instead of github"
	echo "--with-github             use github"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} already installed !"
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installAddSources() {
	_info "Adding additional keys and sources ${APP_TITLE}..."

	_success "Keys and sources added."
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installFpm() {
	fpm -h >/dev/null 2>&1
	exit=$?
	if [[ ! $exit == '0' ]]; then
		_info "Installing fpm package management..."
		_execute "apt-get install -yqq ruby ruby-dev rubygems build-essential"
		_execute "gem install -N fpm"
		_success "fpm installed."
	fi
}

function _cf() {
	DOMAIN="deb.ezapi.net"
	SUBFOLDER=""
	ARCH="amd64"
	SUFFIX=""
}

function _sf() {
	DOMAIN="sourceforge.net"
	SUBFOLDER="projects/seedbox-software-for-linux/files/"
	ARCH="amd64"
	SUFFIX="/download"
}

function _osdn() {
	DOMAIN="osdn.dl.osdn.net"
	SUBFOLDER="storage/g/s/se/seedbox-software-for-linux/"
	ARCH="amd64"
	SUFFIX=""
}

function _github() {
	DOMAIN="raw.githubusercontent.com"
	SUBFOLDER="amefs/quickbox-files/master/"
	ARCH="amd64"
	SUFFIX=""
}

function _download() {
	# init download url
	PACKAGE=$1
	DEB=$2
	case "$cdn" in
	"cf")
		_cf
		wget -t3 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"sf")
		_sf
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"osdn")
		_osdn
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"github")
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	*)
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	esac
}

function _installApp() {
	_info "Building ${APP_TITLE}..."

	# get app version
	case ${version} in
	feature-bind)
		RTVERSION=feature-bind
		LTORRENT=feature-bind
		;;
	0.9.8)
		RTORRENTBIN=rtorrent_0.9.8-1build1_amd64.deb
		LTORRENTBIN=libtorrent21_0.13.8-1build1_amd64.deb
		;;
	0.9.7)
		RTORRENTBIN=rtorrent_0.9.7-1build1_amd64.deb
		LTORRENTBIN=libtorrent20_0.13.7-1build1_amd64.deb
		;;
	0.9.6)
		RTORRENTBIN=rtorrent_0.9.6-1build1_amd64.deb
		LTORRENTBIN=libtorrent19_0.13.6-1build1_amd64.deb
		;;
	0.9.4)
		RTORRENTBIN=rtorrent_0.9.4-1build1_amd64.deb
		LTORRENTBIN=libtorrent18_0.13.4-1build1_amd64.deb
		;;
	* | "")
		RTORRENTBIN=rtorrent_0.9.6-1build1_amd64.deb
		LTORRENTBIN=libtorrent19_0.13.6-1build1_amd64.deb
		;;
	esac

	# installation process
	if [[ ${version} == feature-bind ]]; then
		# prepare package toolchain
		_installDepends
		_installFpm
		if [ ${CODENAME} == 'xenial' ]; then
			_do "apt purge -y libssl-dev"
			_do "apt install -y libssl-dev=1.0.*"
		fi
		# compiling
		BRANCH_LT="https://github.com/rakshasa/libtorrent.git"
		BRANCH_RT="https://github.com/rakshasa/rtorrent.git"

		# libtorrent-rakshasa
		mkdir -p /root/pool
		mkdir -p /root/dist
		cd /tmp
		_execute "git clone -b ${LTORRENT} ${BRANCH_LT} libtorrent"
		cd libtorrent || { _error "Can not download libtorrent-rakshasa" && exit 1; }
		_execute "./autogen.sh"
		_execute "./configure --prefix=/usr --disable-debug"
		LTVERSION=$(grep -Eo "AC_INIT\(libtorrent,.*" configure.ac | grep -Eo "[0-9.]+" | head -n1)
		_execute "make -j$(nproc)"
		_execute "make DESTDIR=/tmp/dist/libtorrent-rakshasa install"
		fpm -f -C /tmp/dist/libtorrent-rakshasa -p /root/pool/libtorrent-rakshasa_${LTVERSION}.deb -s dir -t deb -n libtorrent-rakshasa --version ${LTVERSION} --description "libtorrent-rakshasa compiled by QuickBox Lite" >/dev/null 2>&1
		_execute "dpkg -i /root/pool/libtorrent-rakshasa_${LTVERSION}.deb"
		rm -rf /tmp/libtorrent
		_execute "ldconfig"

		# rtorrent
		cd /tmp
		_execute "git clone -b ${RTVERSION} ${BRANCH_RT} rtorrent"
		cd rtorrent || { _error "Can not download rTorrent" && exit 1; }
		_execute "./autogen.sh"
		_execute "./configure --prefix=/usr --with-xmlrpc-c --with-ncurses --disable-debug --enable-ipv6"
		RTVERSION=$(grep -Eo "AC_INIT\(rtorrent,.*" configure.ac | grep -Eo "[0-9.]+" | head -n1)
		_execute "make -j$(nproc)"
		_execute "make DESTDIR=/tmp/dist/rtorrent install"
		fpm -f -C /tmp/dist/rtorrent -p /root/pool/rtorrent_${RTVERSION}.deb -s dir -t deb -n rtorrent --version ${RTVERSION} --description "rtorrent compiled by QuickBox Lite" >/dev/null 2>&1
		_execute "dpkg -i /root/pool/rtorrent_${RTVERSION}.deb"
		rm -rf /tmp/rtorrent
		rm -rf /tmp/dist
	else
		APP_BASEDEPS="screen unzip"
		_installDepends
		# get deb packages
		PACKAGE="libtorrent-rakshasa"
		DEB=${LTORRENTBIN}
		cd /tmp
		_download ${PACKAGE} ${DEB}
		PACKAGE="rtorrent"
		DEB=${RTORRENTBIN}
		_download ${PACKAGE} ${DEB}
		_execute "apt install -y /tmp/${LTORRENTBIN}"
		_execute "apt install -y /tmp/${RTORRENTBIN}"
		rm -rf {${LTORRENTBIN},${RTORRENTBIN}}
		# disable auto upgrade
		_execute "apt-mark hold rtorrent"
		_execute "apt-mark hold libtorrent18"
		_execute "apt-mark hold libtorrent19"
		_execute "apt-mark hold libtorrent20"
		_execute "apt-mark hold libtorrent21"
	fi
	_success "${APP_TITLE} Built."
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."
	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		# get used port
		local usedport=""
		if (find /install/ -type f | grep -q .$APP_NAME.port); then
			usedport=$(cat $(find /install/ -type f | grep .$APP_NAME.port))
		fi
		# generate available port
		PORT=$(shuf -i ${APP_DAEMON_PORT_LOW}-${APP_DAEMON_PORT_HIGH} -n 1)
		while [[ "$(netstat -ln | grep ':'"$PORT"'' | grep -c 'LISTEN')" -eq "1" || $usedport =~ $PORT ]]; do
			PORT=$(shuf -i ${APP_DAEMON_PORT_LOW}-${APP_DAEMON_PORT_HIGH} -n 1)
		done
		echo "$PORT" >/install/$username.$APP_NAME.port

		cat >/home/${username}/.rtorrent.rc <<EOF
# -- START HERE --
directory.default.set = /home/${username}/torrents/rtorrent
encoding.add = UTF-8
execute.nothrow = chmod,777,/home/${username}/.config/rpc.socket
execute.nothrow = chmod,777,/home/${username}/.sessions

### Networking
network.port_random.set = no
network.port_range.set = $PORT-$PORT
network.scgi.open_local = /var/run/${username}/.rtorrent.sock
schedule2 = chmod_scgi_socket, 0, 0, "execute2=chmod,\"g+w,o=\",/var/run/${username}/.rtorrent.sock"
network.tos.set = throughput
network.receive_buffer.size.set =  4M
network.send_buffer.size.set    = 32M
network.xmlrpc.size_limit.set = 4M
protocol.pex.set = no
protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

### Memory Settings
pieces.hash.on_completion.set = no
pieces.memory.max.set = 2048M
pieces.preload.type.set = 1
pieces.preload.min_size.set = 262144
pieces.preload.min_rate.set = 5120

### Auto load
schedule = watch_directory,5,5,load.start=/home/${username}/rwatch/*.torrent
session.path.set = /home/${username}/.sessions/

### BitTorrent
# Global upload and download rate in KiB, 0 for unlimited
throttle.global_down.max_rate.set = 0
throttle.global_up.max_rate.set = 0

# Maximum number of simultaneous downloads and uploads slots
throttle.max_downloads.global.set = 4000
throttle.max_uploads.global.set = 4000

# Maximum and minimum number of peers to connect to per torrent while downloading
throttle.min_peers.normal.set = 1
throttle.max_peers.normal.set = 4000

# Same as above but for seeding completed torrents (seeds per torrent)
throttle.max_peers.seed.set = -1
throttle.min_peers.seed.set = -1
trackers.use_udp.set = yes

# ruTorrent
execute = {sh,-c,/usr/bin/php /srv/rutorrent/php/initplugins.php ${username} &}

# -- END HERE --
EOF
		chown ${username}.${username} -R /home/${username}/.rtorrent.rc
		if [[ ! -f /etc/nginx/apps/${username}.scgi.conf ]]; then
			cat >/etc/nginx/apps/${username}.scgi.conf <<SCGI
location /${username} {
include scgi_params;
scgi_pass unix:/var/run/${username}/.rtorrent.sock;
auth_basic "Password Required";
auth_basic_user_file /etc/htpasswd.d/htpasswd.${username};
}
SCGI
		fi
		mkdir -p /home/${username}/torrents/rtorrent
		mkdir -p /home/${username}/.sessions
		mkdir -p /home/${username}/rwatch
		chown -R ${username}.${username} /home/${username}/{torrents,.sessions,rwatch}
		usermod -a -G www-data ${username}
		usermod -a -G ${username} www-data

		cat >/etc/nginx/apps/${username}.rtdlindex.conf <<RDL
location /${username}.rtorrent.downloads {
  alias /home/${username}/torrents/rtorrent;
  include /etc/nginx/snippets/fancyindex.conf;
  auth_basic "Password Required";
  auth_basic_user_file /etc/htpasswd.d/htpasswd.${username};

  location ~* \.php$ {

  }
}
RDL
	done
	cat >/etc/systemd/system/${APP_SERVICE}@.service <<EOF
[Unit]
Description=rTorrent
After=network.target
[Service]
Type=forking
KillMode=none
User=%I
LimitNOFILE=infinity
ExecStartPre=-/bin/rm -f /home/%I/.sessions/rtorrent.lock
ExecStart=/usr/bin/screen -d -m -fa -S rtorrent /usr/bin/rtorrent
ExecStop=/usr/bin/screen -X -S rtorrent quit
WorkingDirectory=/home/%I/
[Install]
WantedBy=multi-user.target
EOF
	_execute "systemctl daemon-reload"
	_execute "nginx -s reload"
	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/${APP_LOCK}
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		_execute "systemctl enable ${APP_SERVICE}@${username}"
		_execute "systemctl start ${APP_SERVICE}@${username}"
	done
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o ghl:v: -l gui,help,with-cf,with-sf,with-osdn,with-geithub,log:,version: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-g | --gui)
		_menuinstall
		break
		;;
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	-v | --version)
		version="$2"
		shift
		;;
	--with-cf)
		cdn="cf"
		;;
	--with-sf)
		cdn="sf"
		;;
	--with-osdn)
		cdn="osdn"
		;;
	--with-github)
		cdn="github"
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
if [[ ! -f /install/.system.lock ]]; then
	_installSystemUpdates
fi
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup
