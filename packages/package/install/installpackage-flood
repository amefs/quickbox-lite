#!/bin/bash
#
# [QuickBox Lite Flood Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Maintainer:   Amefs
# Current version:  v1.5.0
# Author:           Mischief
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="Flood rTorrent Web UI"
APP_NAME="flood"
APP_SERVICE="flood"
APP_LOCK="flood_lock"
APP_BASEDEPS="nodejs"

# RANDOM PORT
APP_WEB_PORT_LOW="15051"
APP_WEB_PORT_HIGH="15100"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
BRANCH="https://github.com/jfurrow/flood.git"

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ ! -f /install/.rtorrent.lock ]]; then
		_warning "Automatically install rTorrent... "
		bash /usr/local/bin/quickbox/package/install/installpackage-rtorrent
	fi
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} already installed !"
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installApp() {
	_info "Building ${APP_TITLE}..."
	mkdir -p /tmp/quickbox
	cd /tmp/quickbox || exit 1
	if [[ ! $(which npm) ]] || [[ $(node --version) =~ "v6" ]]; then
		_execute "curl -sL https://deb.nodesource.com/setup_11.x -o nodesource_setup.sh"
		_execute "sudo bash nodesource_setup.sh"
		_execute "apt-get install -y --force-reinstall true nodejs"
	fi

	if [[ ! $(which node-gyp) ]]; then
		_execute "npm i -g node-gyp"
	fi
	_execute "npm install -g npm-check-updates"
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		# get used port
		local usedport=""
		if (find /install/ -type f | grep -q .$APP_NAME.port); then
			usedport=$(cat $(find /install/ -type f | grep .$APP_NAME.port))
		fi
		# generate available port
		PORT=$(shuf -i ${APP_WEB_PORT_LOW}-${APP_WEB_PORT_HIGH} -n 1)
		while [[ "$(netstat -ln | grep ':'"$PORT"'' | grep -c 'LISTEN')" -eq "1" || $usedport =~ $PORT ]]; do
			PORT=$(shuf -i ${APP_WEB_PORT_LOW}-${APP_WEB_PORT_HIGH} -n 1)
		done
		echo "$PORT" >/install/$username.$APP_NAME.port
		cd /home/${username} || exit 1
		_execute "git clone ${BRANCH} .flood"
		chown -R ${username}: .flood
		cd .flood || { _error "flood installation failed..." && exit 1; }
		cat >/home/${username}/.flood/config.js <<EOF
// This is the configuration file for Flood, a React-based frontend for the
// rtorrent BitTorrent client.
const CONFIG = {
  baseURI: '/${username}/flood',
  dbCleanInterval: 1000 * 60 * 60,
  dbPath: './server/db/',
  floodServerHost: '127.0.0.1',
  floodServerPort: ${PORT},
  floodServerProxy: 'http://127.0.0.1:3000',
  maxHistoryStates: 30,
  torrentClientPollInterval: 1000 * 2,
  secret: 'flood',
  scgi: {
    socket: true,
    socketPath: '/var/run/${username}/.rtorrent.sock',
  },
  ssl: false,
  sslKey: '/absolute/path/to/key/',
  sslCert: '/absolute/path/to/certificate/',
  diskUsageService: {
    // watchMountPoints: [
    //   "/mnt/disk"
    // ]
  }
};
// Do not remove the below line.
module.exports = CONFIG;
EOF
		sudo -u ${username} -H bash -c "cd /home/${username}/.flood; npm install --force && npm run build" >/dev/null 2>&1
	done
	_success "${APP_TITLE} Built."
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."

	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		cat >/etc/nginx/apps/${username}.flood.conf <<NGX
location /${username}/flood {
  return 301 /${username}/flood/;
}

location /${username}/flood/ {
  include /etc/nginx/snippets/proxy.conf;
  proxy_pass http://127.0.0.1:${PORT}/${username}/${APP_NAME}/;
  rewrite ^/${username}/flood/(.*) /\$1 break;
}
NGX
	done
	cat >/etc/systemd/system/${APP_SERVICE}@.service <<EOF
[Unit]
Description=Flood rTorrent Web UI
After=network.target

[Service]
User=%I
Group=%I
WorkingDirectory=/home/%I/.flood
ExecStart=/usr/bin/npm start --production /home/%I/.flood

[Install]
WantedBy=multi-user.target
EOF
	_execute "systemctl daemon-reload"
	_execute "nginx -s reload"
	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/$APP_LOCK
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		_execute "systemctl enable ${APP_SERVICE}@${username}"
		_execute "systemctl start ${APP_SERVICE}@${username}"
	done
	_execute "nginx -s reload"
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl: -l help,log: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
if [[ ! -f /install/.system.lock ]]; then
	_installSystemUpdates
fi
_installDepends
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup
