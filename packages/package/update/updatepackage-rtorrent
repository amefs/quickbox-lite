#!/bin/bash
#
# [QuickBox Lite rTorrent Updater]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.5.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
CODENAME=$(lsb_release -cs)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="rTorrent"
APP_NAME="rtorrent"
APP_SERVICE="rtorrent"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
version=0.9.6
cdn=$(cat /install/.cdn.lock)

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Updater"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile] [-v version]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo "-v, --version <version>   the application version you want to update"
	echo "--with-cf                 use cloudflare instead of github"
	echo "--with-sf                 use sourceforge instead of github"
	echo "--with-osdn               use osdn(jp)  instead of github"
	echo "--with-github             use github"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# REMOVE FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ ! -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} haven't installed ..."
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	rm -f /install/.install.lock
}

function _installFpm() {
	fpm -h >/dev/null 2>&1
	exit=$?
	if [[ ! $exit == '0' ]]; then
		_info "Installing fpm package management..."
		_execute "apt-get install -yqq ruby ruby-dev rubygems build-essential"
		_execute "gem install -N fpm"
		_success "fpm installed."
	fi
}

function _updateInfo() {
	_print "
$APP_TITLE will now be updated.

This process may take a few minutes
Please wait until the process is completed
"
}

function _cf() {
	DOMAIN="deb.ezapi.net"
	SUBFOLDER=""
	ARCH="amd64"
	SUFFIX=""
}

function _sf() {
	DOMAIN="sourceforge.net"
	SUBFOLDER="projects/seedbox-software-for-linux/files/"
	ARCH="amd64"
	SUFFIX="/download"
}

function _osdn() {
	DOMAIN="osdn.dl.osdn.net"
	SUBFOLDER="storage/g/s/se/seedbox-software-for-linux/"
	ARCH="amd64"
	SUFFIX=""
}

function _github() {
	DOMAIN="raw.githubusercontent.com"
	SUBFOLDER="amefs/quickbox-files/master/"
	ARCH="amd64"
	SUFFIX=""
}

function _download() {
	# init download url
	PACKAGE=$1
	DEB=$2
	case "$cdn" in
	"cf")
		_cf
		wget -t3 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"sf")
		_sf
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"osdn")
		_osdn
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"github")
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	*)
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	esac
}

function _updateApp() {
	_info "Updating ${APP_TITLE}..."
	# enable upgrade
	_execute "apt-mark unhold rtorrent"
	_execute "apt-mark unhold libtorrent18"
	_execute "apt-mark unhold libtorrent19"
	_execute "apt-mark unhold libtorrent20"
	_execute "apt-mark unhold libtorrent21"
	_info "Uninstalling old ${APP_TITLE}..."
	_execute "apt-get -y purge rtorrent"
	_execute "apt-get -y purge libtorrent18"
	_execute "apt-get -y purge libtorrent19"
	_execute "apt-get -y purge libtorrent20"
	_execute "apt-get -y purge libtorrent21"
	_execute "apt-get -y purge libtorrent-rakshasa"
	_execute "apt-get -y autoremove"
	_execute "apt-get -y autoclean"
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		_execute "systemctl stop ${APP_SERVICE}@${username}"
	done
	# get app version
	case ${version} in
	feature-bind)
		RTVERSION=feature-bind
		LTORRENT=feature-bind
		;;
	0.9.8)
		RTORRENTBIN=rtorrent_0.9.8-1build1_amd64.deb
		LTORRENTBIN=libtorrent21_0.13.8-1build1_amd64.deb
		;;
	0.9.7)
		RTORRENTBIN=rtorrent_0.9.7-1build1_amd64.deb
		LTORRENTBIN=libtorrent20_0.13.7-1build1_amd64.deb
		;;
	0.9.6)
		RTORRENTBIN=rtorrent_0.9.6-1build1_amd64.deb
		LTORRENTBIN=libtorrent19_0.13.6-1build1_amd64.deb
		;;
	0.9.4)
		RTORRENTBIN=rtorrent_0.9.4-1build1_amd64.deb
		LTORRENTBIN=libtorrent18_0.13.4-1build1_amd64.deb
		;;
	* | "")
		RTORRENTBIN=rtorrent_0.9.6-1build1_amd64.deb
		LTORRENTBIN=libtorrent19_0.13.6-1build1_amd64.deb
		;;
	esac

	# installation process
	if [[ ${version} == feature-bind ]]; then
		_info "Compiling ${APP_TITLE} ${version}..."
		# prepare package toolchain
		_installFpm
		if [ ${CODENAME} == 'xenial' ]; then
			_do "apt purge -y libssl-dev"
			_do "apt install -y libssl-dev=1.0.*"
		fi
		# compiling
		BRANCH_LT="https://github.com/rakshasa/libtorrent.git"
		BRANCH_RT="https://github.com/rakshasa/rtorrent.git"

		# libtorrent-rakshasa
		mkdir -p /root/pool
		mkdir -p /root/dist
		cd /tmp
		_execute "git clone -b ${LTORRENT} ${BRANCH_LT} libtorrent"
		cd libtorrent || { _error "Can not download libtorrent-rakshasa" && exit 1; }
		_execute "./autogen.sh"
		_execute "./configure --prefix=/usr --disable-debug"
		LTVERSION=$(cat configure.ac | grep -Eo "AC_INIT\(libtorrent,.*" | grep -Eo "[0-9.]+" | head -n1)
		_execute "make -j$(nproc)"
		_execute "make DESTDIR=/tmp/dist/libtorrent-rakshasa install"
		fpm -f -C /tmp/dist/libtorrent-rakshasa -p /root/pool/libtorrent-rakshasa_${LTVERSION}.deb -s dir -t deb -n libtorrent-rakshasa --version ${LTVERSION} --description "libtorrent-rakshasa compiled by QuickBox Lite" >/dev/null 2>&1
		_execute "dpkg -i /root/pool/libtorrent-rakshasa_${LTVERSION}.deb"
		rm -rf /tmp/libtorrent
		_execute "ldconfig"

		# rtorrent
		cd /tmp
		_execute "git clone -b ${RTVERSION} ${BRANCH_RT} rtorrent"
		cd rtorrent || { _error "Can not download rTorrent" && exit 1; }
		_execute "./autogen.sh"
		_execute "./configure --prefix=/usr --with-xmlrpc-c --with-ncurses --disable-debug --enable-ipv6"
		RTVERSION=$(cat configure.ac | grep -Eo "AC_INIT\(rtorrent,.*" | grep -Eo "[0-9.]+" | head -n1)
		_execute "make -j$(nproc)"
		_execute "make DESTDIR=/tmp/dist/rtorrent install"
		fpm -f -C /tmp/dist/rtorrent -p /root/pool/rtorrent_${RTVERSION}.deb -s dir -t deb -n rtorrent --version ${RTVERSION} --description "rtorrent compiled by QuickBox Lite" >/dev/null 2>&1
		_execute "dpkg -i /root/pool/rtorrent_${RTVERSION}.deb"
		rm -rf /tmp/rtorrent
		rm -rf /tmp/dist
	else
		_info "Installing ${APP_TITLE} ${version}..."
		# get deb packages
		cd /tmp
		PACKAGE="libtorrent-rakshasa"
		DEB=${LTORRENTBIN}
		cd /tmp
		_download ${PACKAGE} ${DEB}
		PACKAGE="rtorrent"
		DEB=${RTORRENTBIN}
		_download ${PACKAGE} ${DEB}
		_execute "apt install -y /tmp/${LTORRENTBIN}"
		_execute "apt install -y /tmp/${RTORRENTBIN}"
		rm -rf {${LTORRENTBIN},${RTORRENTBIN}}
		# disable auto upgrade
		_execute "apt-mark hold rtorrent"
		_execute "apt-mark hold libtorrent18"
		_execute "apt-mark hold libtorrent19"
		_execute "apt-mark hold libtorrent20"
		_execute "apt-mark hold libtorrent21"
	fi
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		_execute "systemctl start ${APP_SERVICE}@${username}"
	done
	_success "${APP_TITLE} is now update to date."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl:v: -l help,with-cf,with-sf,with-osdn,with-github,log:,version: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	-v | --version)
		version="$2"
		shift
		;;
	--with-cf)
		cdn="cf"
		;;
	--with-sf)
		cdn="sf"
		;;
	--with-osdn)
		cdn="osdn"
		;;
	--with-github)
		cdn="github"
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_updateInfo
_updateApp
_lockCleanup
